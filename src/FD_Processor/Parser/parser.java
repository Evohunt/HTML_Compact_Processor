
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\154\000\002\002\005\000\002\002\004\000\002\003" +
    "\003\000\002\003\003\000\002\004\004\000\002\004\005" +
    "\000\002\005\005\000\002\005\004\000\002\035\004\000" +
    "\002\035\003\000\002\036\003\000\002\036\004\000\002" +
    "\036\005\000\002\037\004\000\002\037\003\000\002\040" +
    "\003\000\002\040\003\000\002\040\003\000\002\040\003" +
    "\000\002\073\003\000\002\073\003\000\002\073\003\000" +
    "\002\073\003\000\002\041\003\000\002\041\003\000\002" +
    "\041\003\000\002\041\003\000\002\041\003\000\002\041" +
    "\003\000\002\074\003\000\002\074\003\000\002\074\003" +
    "\000\002\074\003\000\002\074\003\000\002\065\005\000" +
    "\002\075\005\000\002\064\004\000\002\064\005\000\002" +
    "\044\004\000\002\044\003\000\002\045\003\000\002\045" +
    "\003\000\002\045\005\000\002\047\004\000\002\047\003" +
    "\000\002\046\005\000\002\050\005\000\002\055\005\000" +
    "\002\052\004\000\002\052\003\000\002\051\005\000\002" +
    "\051\004\000\002\056\004\000\002\056\003\000\002\057" +
    "\003\000\002\057\003\000\002\043\003\000\002\043\003" +
    "\000\002\043\003\000\002\043\003\000\002\043\003\000" +
    "\002\060\005\000\002\060\004\000\002\062\004\000\002" +
    "\062\003\000\002\063\003\000\002\063\003\000\002\042" +
    "\005\000\002\042\004\000\002\042\005\000\002\042\004" +
    "\000\002\042\005\000\002\042\004\000\002\042\005\000" +
    "\002\042\004\000\002\042\005\000\002\042\004\000\002" +
    "\042\005\000\002\042\004\000\002\061\005\000\002\061" +
    "\004\000\002\061\005\000\002\061\004\000\002\061\005" +
    "\000\002\061\004\000\002\061\005\000\002\061\004\000" +
    "\002\061\005\000\002\061\004\000\002\061\005\000\002" +
    "\061\004\000\002\061\005\000\002\061\004\000\002\053" +
    "\005\000\002\053\004\000\002\054\005\000\002\054\004" +
    "\000\002\071\004\000\002\071\003\000\002\072\003\000" +
    "\002\072\003\000\002\072\003\000\002\070\005\000\002" +
    "\070\004\000\002\067\004\000\002\067\003\000\002\066" +
    "\005\000\002\066\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\254\000\004\004\005\001\002\000\004\002\256\001" +
    "\002\000\006\033\007\035\012\001\002\000\004\005\uffff" +
    "\001\002\000\064\034\254\037\060\043\022\052\043\064" +
    "\052\065\037\067\041\071\040\075\036\077\030\101\024" +
    "\103\056\105\063\107\057\111\033\113\046\115\067\117" +
    "\066\121\065\123\064\125\062\127\061\131\025\133\050" +
    "\134\047\001\002\000\004\005\252\001\002\000\004\005" +
    "\ufffe\001\002\000\010\036\014\040\016\041\013\001\002" +
    "\000\064\037\060\042\054\043\022\052\043\064\052\065" +
    "\037\067\041\071\040\075\036\077\030\101\024\103\056" +
    "\105\063\107\057\111\033\113\046\115\067\117\066\121" +
    "\065\123\064\125\062\127\061\131\025\133\050\134\047" +
    "\001\002\000\004\005\ufffa\001\002\000\010\036\ufff8\040" +
    "\ufff8\041\ufff8\001\002\000\010\036\ufff7\040\ufff7\041\ufff7" +
    "\001\002\000\010\036\020\040\016\041\013\001\002\000" +
    "\004\005\ufffb\001\002\000\010\036\ufff9\040\ufff9\041\ufff9" +
    "\001\002\000\066\037\060\044\217\045\221\046\225\052" +
    "\043\064\052\065\037\067\041\071\040\075\036\077\030" +
    "\101\024\103\056\105\063\107\057\111\033\113\230\115" +
    "\067\117\066\121\065\123\064\125\062\127\061\131\025" +
    "\133\231\134\047\001\002\000\076\034\uffe9\037\uffe9\042" +
    "\uffe9\043\uffe9\052\uffe9\057\uffe9\061\uffe9\064\uffe9\065\uffe9" +
    "\067\uffe9\071\uffe9\074\uffe9\075\uffe9\077\uffe9\101\uffe9\103" +
    "\uffe9\105\uffe9\107\uffe9\111\uffe9\113\uffe9\114\uffe9\115\uffe9" +
    "\117\uffe9\121\uffe9\123\uffe9\125\uffe9\127\uffe9\131\uffe9\133" +
    "\uffe9\134\uffe9\001\002\000\032\037\060\064\052\065\037" +
    "\075\036\077\030\101\024\102\214\103\056\105\063\107" +
    "\057\111\033\134\047\001\002\000\006\037\212\132\211" +
    "\001\002\000\076\034\uffe7\037\uffe7\042\uffe7\043\uffe7\052" +
    "\uffe7\057\uffe7\061\uffe7\064\uffe7\065\uffe7\067\uffe7\071\uffe7" +
    "\074\uffe7\075\uffe7\077\uffe7\101\uffe7\103\uffe7\105\uffe7\107" +
    "\uffe7\111\uffe7\113\uffe7\114\uffe7\115\uffe7\117\uffe7\121\uffe7" +
    "\123\uffe7\125\uffe7\127\uffe7\131\uffe7\133\uffe7\134\uffe7\001" +
    "\002\000\076\034\uffe6\037\uffe6\042\uffe6\043\uffe6\052\uffe6" +
    "\057\uffe6\061\uffe6\064\uffe6\065\uffe6\067\uffe6\071\uffe6\074" +
    "\uffe6\075\uffe6\077\uffe6\101\uffe6\103\uffe6\105\uffe6\107\uffe6" +
    "\111\uffe6\113\uffe6\114\uffe6\115\uffe6\117\uffe6\121\uffe6\123" +
    "\uffe6\125\uffe6\127\uffe6\131\uffe6\133\uffe6\134\uffe6\001\002" +
    "\000\032\037\060\064\052\065\037\075\036\077\030\100" +
    "\206\101\024\103\056\105\063\107\057\111\033\134\047" +
    "\001\002\000\074\034\ufff2\037\ufff2\042\ufff2\043\ufff2\052" +
    "\ufff2\057\ufff2\061\ufff2\064\ufff2\065\ufff2\067\ufff2\071\ufff2" +
    "\075\ufff2\077\ufff2\101\ufff2\103\ufff2\105\ufff2\107\ufff2\111" +
    "\ufff2\113\ufff2\114\ufff2\115\ufff2\117\ufff2\121\ufff2\123\ufff2" +
    "\125\ufff2\127\ufff2\131\ufff2\133\ufff2\134\ufff2\001\002\000" +
    "\076\034\uffea\037\uffea\042\uffea\043\uffea\052\uffea\057\uffea" +
    "\061\uffea\064\uffea\065\uffea\067\uffea\071\uffea\074\uffea\075" +
    "\uffea\077\uffea\101\uffea\103\uffea\105\uffea\107\uffea\111\uffea" +
    "\113\uffea\114\uffea\115\uffea\117\uffea\121\uffea\123\uffea\125" +
    "\uffea\127\uffea\131\uffea\133\uffea\134\uffea\001\002\000\006" +
    "\037\203\112\204\001\002\000\066\034\ufff3\037\ufff3\042" +
    "\ufff3\043\ufff3\052\ufff3\064\ufff3\065\ufff3\067\ufff3\071\ufff3" +
    "\075\ufff3\077\ufff3\101\ufff3\103\ufff3\105\ufff3\107\ufff3\111" +
    "\ufff3\113\ufff3\115\ufff3\117\ufff3\121\ufff3\123\ufff3\125\ufff3" +
    "\127\ufff3\131\ufff3\133\ufff3\134\ufff3\001\002\000\136\034" +
    "\uffc7\037\uffc7\042\uffc7\043\uffc7\044\uffc7\045\uffc7\046\uffc7" +
    "\052\uffc7\057\uffc7\061\uffc7\064\uffc7\065\uffc7\066\uffc7\067" +
    "\uffc7\071\uffc7\074\uffc7\075\uffc7\076\uffc7\077\uffc7\100\uffc7" +
    "\101\uffc7\102\uffc7\103\uffc7\104\uffc7\105\uffc7\106\uffc7\107" +
    "\uffc7\110\uffc7\111\uffc7\113\uffc7\114\uffc7\115\uffc7\116\uffc7" +
    "\117\uffc7\120\uffc7\121\uffc7\122\uffc7\123\uffc7\124\uffc7\125" +
    "\uffc7\126\uffc7\127\uffc7\130\uffc7\131\uffc7\133\uffc7\134\uffc7" +
    "\001\002\000\032\037\060\064\052\065\037\075\036\076" +
    "\200\077\030\101\024\103\056\105\063\107\057\111\033" +
    "\134\047\001\002\000\046\037\060\064\052\065\037\066" +
    "\171\075\036\077\030\101\024\103\056\105\063\107\057" +
    "\111\033\115\067\117\066\121\065\123\064\125\062\127" +
    "\061\134\047\001\002\000\004\073\153\001\002\000\004" +
    "\073\153\001\002\000\064\037\060\042\152\043\022\052" +
    "\043\064\052\065\037\067\041\071\040\075\036\077\030" +
    "\101\024\103\056\105\063\107\057\111\033\113\046\115" +
    "\067\117\066\121\065\123\064\125\062\127\061\131\025" +
    "\133\050\134\047\001\002\000\012\053\126\054\130\062" +
    "\127\063\125\001\002\000\074\034\ufff0\037\ufff0\042\ufff0" +
    "\043\ufff0\052\ufff0\057\ufff0\061\ufff0\064\ufff0\065\ufff0\067" +
    "\ufff0\071\ufff0\075\ufff0\077\ufff0\101\ufff0\103\ufff0\105\ufff0" +
    "\107\ufff0\111\ufff0\113\ufff0\114\ufff0\115\ufff0\117\ufff0\121" +
    "\ufff0\123\ufff0\125\ufff0\127\ufff0\131\ufff0\133\ufff0\134\ufff0" +
    "\001\002\000\076\034\uffe8\037\uffe8\042\uffe8\043\uffe8\052" +
    "\uffe8\057\uffe8\061\uffe8\064\uffe8\065\uffe8\067\uffe8\071\uffe8" +
    "\074\uffe8\075\uffe8\077\uffe8\101\uffe8\103\uffe8\105\uffe8\107" +
    "\uffe8\111\uffe8\113\uffe8\114\uffe8\115\uffe8\117\uffe8\121\uffe8" +
    "\123\uffe8\125\uffe8\127\uffe8\131\uffe8\133\uffe8\134\uffe8\001" +
    "\002\000\062\037\060\043\022\052\043\064\052\065\037" +
    "\067\041\071\040\075\036\077\030\101\024\103\056\105" +
    "\063\107\057\111\033\113\046\115\067\117\066\121\065" +
    "\123\064\125\062\127\061\131\025\133\050\134\047\001" +
    "\002\000\136\034\uffc9\037\uffc9\042\uffc9\043\uffc9\044\uffc9" +
    "\045\uffc9\046\uffc9\052\uffc9\057\uffc9\061\uffc9\064\uffc9\065" +
    "\uffc9\066\uffc9\067\uffc9\071\uffc9\074\uffc9\075\uffc9\076\uffc9" +
    "\077\uffc9\100\uffc9\101\uffc9\102\uffc9\103\uffc9\104\uffc9\105" +
    "\uffc9\106\uffc9\107\uffc9\110\uffc9\111\uffc9\113\uffc9\114\uffc9" +
    "\115\uffc9\116\uffc9\117\uffc9\120\uffc9\121\uffc9\122\uffc9\123" +
    "\uffc9\124\uffc9\125\uffc9\126\uffc9\127\uffc9\130\uffc9\131\uffc9" +
    "\133\uffc9\134\uffc9\001\002\000\074\034\uffef\037\uffef\042" +
    "\uffef\043\uffef\052\uffef\057\uffef\061\uffef\064\uffef\065\uffef" +
    "\067\uffef\071\uffef\075\uffef\077\uffef\101\uffef\103\uffef\105" +
    "\uffef\107\uffef\111\uffef\113\uffef\114\uffef\115\uffef\117\uffef" +
    "\121\uffef\123\uffef\125\uffef\127\uffef\131\uffef\133\uffef\134" +
    "\uffef\001\002\000\076\034\uffe5\037\uffe5\042\uffe5\043\uffe5" +
    "\052\uffe5\057\uffe5\061\uffe5\064\uffe5\065\uffe5\067\uffe5\071" +
    "\uffe5\074\uffe5\075\uffe5\077\uffe5\101\uffe5\103\uffe5\105\uffe5" +
    "\107\uffe5\111\uffe5\113\uffe5\114\uffe5\115\uffe5\117\uffe5\121" +
    "\uffe5\123\uffe5\125\uffe5\127\uffe5\131\uffe5\133\uffe5\134\uffe5" +
    "\001\002\000\136\034\uffc8\037\uffc8\042\uffc8\043\uffc8\044" +
    "\uffc8\045\uffc8\046\uffc8\052\uffc8\057\uffc8\061\uffc8\064\uffc8" +
    "\065\uffc8\066\uffc8\067\uffc8\071\uffc8\074\uffc8\075\uffc8\076" +
    "\uffc8\077\uffc8\100\uffc8\101\uffc8\102\uffc8\103\uffc8\104\uffc8" +
    "\105\uffc8\106\uffc8\107\uffc8\110\uffc8\111\uffc8\113\uffc8\114" +
    "\uffc8\115\uffc8\116\uffc8\117\uffc8\120\uffc8\121\uffc8\122\uffc8" +
    "\123\uffc8\124\uffc8\125\uffc8\126\uffc8\127\uffc8\130\uffc8\131" +
    "\uffc8\133\uffc8\134\uffc8\001\002\000\136\034\uffc5\037\uffc5" +
    "\042\uffc5\043\uffc5\044\uffc5\045\uffc5\046\uffc5\052\uffc5\057" +
    "\uffc5\061\uffc5\064\uffc5\065\uffc5\066\uffc5\067\uffc5\071\uffc5" +
    "\074\uffc5\075\uffc5\076\uffc5\077\uffc5\100\uffc5\101\uffc5\102" +
    "\uffc5\103\uffc5\104\uffc5\105\uffc5\106\uffc5\107\uffc5\110\uffc5" +
    "\111\uffc5\113\uffc5\114\uffc5\115\uffc5\116\uffc5\117\uffc5\120" +
    "\uffc5\121\uffc5\122\uffc5\123\uffc5\124\uffc5\125\uffc5\126\uffc5" +
    "\127\uffc5\130\uffc5\131\uffc5\133\uffc5\134\uffc5\001\002\000" +
    "\010\036\ufff6\040\ufff6\041\ufff6\001\002\000\074\034\ufff1" +
    "\037\ufff1\042\ufff1\043\ufff1\052\ufff1\057\ufff1\061\ufff1\064" +
    "\ufff1\065\ufff1\067\ufff1\071\ufff1\075\ufff1\077\ufff1\101\ufff1" +
    "\103\ufff1\105\ufff1\107\ufff1\111\ufff1\113\ufff1\114\ufff1\115" +
    "\ufff1\117\ufff1\121\ufff1\123\ufff1\125\ufff1\127\ufff1\131\ufff1" +
    "\133\ufff1\134\ufff1\001\002\000\032\037\060\064\052\065" +
    "\037\075\036\077\030\101\024\103\056\104\120\105\063" +
    "\107\057\111\033\134\047\001\002\000\032\037\060\064" +
    "\052\065\037\075\036\077\030\101\024\103\056\105\063" +
    "\107\057\110\116\111\033\134\047\001\002\000\136\034" +
    "\uffc6\037\uffc6\042\uffc6\043\uffc6\044\uffc6\045\uffc6\046\uffc6" +
    "\052\uffc6\057\uffc6\061\uffc6\064\uffc6\065\uffc6\066\uffc6\067" +
    "\uffc6\071\uffc6\074\uffc6\075\uffc6\076\uffc6\077\uffc6\100\uffc6" +
    "\101\uffc6\102\uffc6\103\uffc6\104\uffc6\105\uffc6\106\uffc6\107" +
    "\uffc6\110\uffc6\111\uffc6\113\uffc6\114\uffc6\115\uffc6\116\uffc6" +
    "\117\uffc6\120\uffc6\121\uffc6\122\uffc6\123\uffc6\124\uffc6\125" +
    "\uffc6\126\uffc6\127\uffc6\130\uffc6\131\uffc6\133\uffc6\134\uffc6" +
    "\001\002\000\032\037\060\064\052\065\037\075\036\077" +
    "\030\101\024\103\056\105\063\107\057\111\033\130\112" +
    "\134\047\001\002\000\032\037\060\064\052\065\037\075" +
    "\036\077\030\101\024\103\056\105\063\107\057\111\033" +
    "\126\107\134\047\001\002\000\032\037\060\064\052\065" +
    "\037\075\036\077\030\101\024\103\056\105\063\106\104" +
    "\107\057\111\033\134\047\001\002\000\032\037\060\064" +
    "\052\065\037\075\036\077\030\101\024\103\056\105\063" +
    "\107\057\111\033\124\101\134\047\001\002\000\032\037" +
    "\060\064\052\065\037\075\036\077\030\101\024\103\056" +
    "\105\063\107\057\111\033\122\076\134\047\001\002\000" +
    "\032\037\060\064\052\065\037\075\036\077\030\101\024" +
    "\103\056\105\063\107\057\111\033\120\073\134\047\001" +
    "\002\000\032\037\060\064\052\065\037\075\036\077\030" +
    "\101\024\103\056\105\063\107\057\111\033\116\070\134" +
    "\047\001\002\000\104\034\uffbd\037\uffbd\042\uffbd\043\uffbd" +
    "\044\uffbd\045\uffbd\046\uffbd\052\uffbd\057\uffbd\061\uffbd\064" +
    "\uffbd\065\uffbd\066\uffbd\067\uffbd\071\uffbd\075\uffbd\077\uffbd" +
    "\101\uffbd\103\uffbd\105\uffbd\107\uffbd\111\uffbd\113\uffbd\114" +
    "\uffbd\115\uffbd\117\uffbd\121\uffbd\123\uffbd\125\uffbd\127\uffbd" +
    "\131\uffbd\133\uffbd\134\uffbd\001\002\000\004\116\072\001" +
    "\002\000\104\034\uffbe\037\uffbe\042\uffbe\043\uffbe\044\uffbe" +
    "\045\uffbe\046\uffbe\052\uffbe\057\uffbe\061\uffbe\064\uffbe\065" +
    "\uffbe\066\uffbe\067\uffbe\071\uffbe\075\uffbe\077\uffbe\101\uffbe" +
    "\103\uffbe\105\uffbe\107\uffbe\111\uffbe\113\uffbe\114\uffbe\115" +
    "\uffbe\117\uffbe\121\uffbe\123\uffbe\125\uffbe\127\uffbe\131\uffbe" +
    "\133\uffbe\134\uffbe\001\002\000\104\034\uffbb\037\uffbb\042" +
    "\uffbb\043\uffbb\044\uffbb\045\uffbb\046\uffbb\052\uffbb\057\uffbb" +
    "\061\uffbb\064\uffbb\065\uffbb\066\uffbb\067\uffbb\071\uffbb\075" +
    "\uffbb\077\uffbb\101\uffbb\103\uffbb\105\uffbb\107\uffbb\111\uffbb" +
    "\113\uffbb\114\uffbb\115\uffbb\117\uffbb\121\uffbb\123\uffbb\125" +
    "\uffbb\127\uffbb\131\uffbb\133\uffbb\134\uffbb\001\002\000\004" +
    "\120\075\001\002\000\104\034\uffbc\037\uffbc\042\uffbc\043" +
    "\uffbc\044\uffbc\045\uffbc\046\uffbc\052\uffbc\057\uffbc\061\uffbc" +
    "\064\uffbc\065\uffbc\066\uffbc\067\uffbc\071\uffbc\075\uffbc\077" +
    "\uffbc\101\uffbc\103\uffbc\105\uffbc\107\uffbc\111\uffbc\113\uffbc" +
    "\114\uffbc\115\uffbc\117\uffbc\121\uffbc\123\uffbc\125\uffbc\127" +
    "\uffbc\131\uffbc\133\uffbc\134\uffbc\001\002\000\104\034\uffb9" +
    "\037\uffb9\042\uffb9\043\uffb9\044\uffb9\045\uffb9\046\uffb9\052" +
    "\uffb9\057\uffb9\061\uffb9\064\uffb9\065\uffb9\066\uffb9\067\uffb9" +
    "\071\uffb9\075\uffb9\077\uffb9\101\uffb9\103\uffb9\105\uffb9\107" +
    "\uffb9\111\uffb9\113\uffb9\114\uffb9\115\uffb9\117\uffb9\121\uffb9" +
    "\123\uffb9\125\uffb9\127\uffb9\131\uffb9\133\uffb9\134\uffb9\001" +
    "\002\000\004\122\100\001\002\000\104\034\uffba\037\uffba" +
    "\042\uffba\043\uffba\044\uffba\045\uffba\046\uffba\052\uffba\057" +
    "\uffba\061\uffba\064\uffba\065\uffba\066\uffba\067\uffba\071\uffba" +
    "\075\uffba\077\uffba\101\uffba\103\uffba\105\uffba\107\uffba\111" +
    "\uffba\113\uffba\114\uffba\115\uffba\117\uffba\121\uffba\123\uffba" +
    "\125\uffba\127\uffba\131\uffba\133\uffba\134\uffba\001\002\000" +
    "\104\034\uffb7\037\uffb7\042\uffb7\043\uffb7\044\uffb7\045\uffb7" +
    "\046\uffb7\052\uffb7\057\uffb7\061\uffb7\064\uffb7\065\uffb7\066" +
    "\uffb7\067\uffb7\071\uffb7\075\uffb7\077\uffb7\101\uffb7\103\uffb7" +
    "\105\uffb7\107\uffb7\111\uffb7\113\uffb7\114\uffb7\115\uffb7\117" +
    "\uffb7\121\uffb7\123\uffb7\125\uffb7\127\uffb7\131\uffb7\133\uffb7" +
    "\134\uffb7\001\002\000\004\124\103\001\002\000\104\034" +
    "\uffb8\037\uffb8\042\uffb8\043\uffb8\044\uffb8\045\uffb8\046\uffb8" +
    "\052\uffb8\057\uffb8\061\uffb8\064\uffb8\065\uffb8\066\uffb8\067" +
    "\uffb8\071\uffb8\075\uffb8\077\uffb8\101\uffb8\103\uffb8\105\uffb8" +
    "\107\uffb8\111\uffb8\113\uffb8\114\uffb8\115\uffb8\117\uffb8\121" +
    "\uffb8\123\uffb8\125\uffb8\127\uffb8\131\uffb8\133\uffb8\134\uffb8" +
    "\001\002\000\136\034\uffa7\037\uffa7\042\uffa7\043\uffa7\044" +
    "\uffa7\045\uffa7\046\uffa7\052\uffa7\057\uffa7\061\uffa7\064\uffa7" +
    "\065\uffa7\066\uffa7\067\uffa7\071\uffa7\074\uffa7\075\uffa7\076" +
    "\uffa7\077\uffa7\100\uffa7\101\uffa7\102\uffa7\103\uffa7\104\uffa7" +
    "\105\uffa7\106\uffa7\107\uffa7\110\uffa7\111\uffa7\113\uffa7\114" +
    "\uffa7\115\uffa7\116\uffa7\117\uffa7\120\uffa7\121\uffa7\122\uffa7" +
    "\123\uffa7\124\uffa7\125\uffa7\126\uffa7\127\uffa7\130\uffa7\131" +
    "\uffa7\133\uffa7\134\uffa7\001\002\000\004\106\106\001\002" +
    "\000\136\034\uffa8\037\uffa8\042\uffa8\043\uffa8\044\uffa8\045" +
    "\uffa8\046\uffa8\052\uffa8\057\uffa8\061\uffa8\064\uffa8\065\uffa8" +
    "\066\uffa8\067\uffa8\071\uffa8\074\uffa8\075\uffa8\076\uffa8\077" +
    "\uffa8\100\uffa8\101\uffa8\102\uffa8\103\uffa8\104\uffa8\105\uffa8" +
    "\106\uffa8\107\uffa8\110\uffa8\111\uffa8\113\uffa8\114\uffa8\115" +
    "\uffa8\116\uffa8\117\uffa8\120\uffa8\121\uffa8\122\uffa8\123\uffa8" +
    "\124\uffa8\125\uffa8\126\uffa8\127\uffa8\130\uffa8\131\uffa8\133" +
    "\uffa8\134\uffa8\001\002\000\104\034\uffb5\037\uffb5\042\uffb5" +
    "\043\uffb5\044\uffb5\045\uffb5\046\uffb5\052\uffb5\057\uffb5\061" +
    "\uffb5\064\uffb5\065\uffb5\066\uffb5\067\uffb5\071\uffb5\075\uffb5" +
    "\077\uffb5\101\uffb5\103\uffb5\105\uffb5\107\uffb5\111\uffb5\113" +
    "\uffb5\114\uffb5\115\uffb5\117\uffb5\121\uffb5\123\uffb5\125\uffb5" +
    "\127\uffb5\131\uffb5\133\uffb5\134\uffb5\001\002\000\004\126" +
    "\111\001\002\000\104\034\uffb6\037\uffb6\042\uffb6\043\uffb6" +
    "\044\uffb6\045\uffb6\046\uffb6\052\uffb6\057\uffb6\061\uffb6\064" +
    "\uffb6\065\uffb6\066\uffb6\067\uffb6\071\uffb6\075\uffb6\077\uffb6" +
    "\101\uffb6\103\uffb6\105\uffb6\107\uffb6\111\uffb6\113\uffb6\114" +
    "\uffb6\115\uffb6\117\uffb6\121\uffb6\123\uffb6\125\uffb6\127\uffb6" +
    "\131\uffb6\133\uffb6\134\uffb6\001\002\000\104\034\uffb3\037" +
    "\uffb3\042\uffb3\043\uffb3\044\uffb3\045\uffb3\046\uffb3\052\uffb3" +
    "\057\uffb3\061\uffb3\064\uffb3\065\uffb3\066\uffb3\067\uffb3\071" +
    "\uffb3\075\uffb3\077\uffb3\101\uffb3\103\uffb3\105\uffb3\107\uffb3" +
    "\111\uffb3\113\uffb3\114\uffb3\115\uffb3\117\uffb3\121\uffb3\123" +
    "\uffb3\125\uffb3\127\uffb3\131\uffb3\133\uffb3\134\uffb3\001\002" +
    "\000\004\130\114\001\002\000\104\034\uffb4\037\uffb4\042" +
    "\uffb4\043\uffb4\044\uffb4\045\uffb4\046\uffb4\052\uffb4\057\uffb4" +
    "\061\uffb4\064\uffb4\065\uffb4\066\uffb4\067\uffb4\071\uffb4\075" +
    "\uffb4\077\uffb4\101\uffb4\103\uffb4\105\uffb4\107\uffb4\111\uffb4" +
    "\113\uffb4\114\uffb4\115\uffb4\117\uffb4\121\uffb4\123\uffb4\125" +
    "\uffb4\127\uffb4\131\uffb4\133\uffb4\134\uffb4\001\002\000\004" +
    "\110\117\001\002\000\136\034\uffa9\037\uffa9\042\uffa9\043" +
    "\uffa9\044\uffa9\045\uffa9\046\uffa9\052\uffa9\057\uffa9\061\uffa9" +
    "\064\uffa9\065\uffa9\066\uffa9\067\uffa9\071\uffa9\074\uffa9\075" +
    "\uffa9\076\uffa9\077\uffa9\100\uffa9\101\uffa9\102\uffa9\103\uffa9" +
    "\104\uffa9\105\uffa9\106\uffa9\107\uffa9\110\uffa9\111\uffa9\113" +
    "\uffa9\114\uffa9\115\uffa9\116\uffa9\117\uffa9\120\uffa9\121\uffa9" +
    "\122\uffa9\123\uffa9\124\uffa9\125\uffa9\126\uffa9\127\uffa9\130" +
    "\uffa9\131\uffa9\133\uffa9\134\uffa9\001\002\000\136\034\uffaa" +
    "\037\uffaa\042\uffaa\043\uffaa\044\uffaa\045\uffaa\046\uffaa\052" +
    "\uffaa\057\uffaa\061\uffaa\064\uffaa\065\uffaa\066\uffaa\067\uffaa" +
    "\071\uffaa\074\uffaa\075\uffaa\076\uffaa\077\uffaa\100\uffaa\101" +
    "\uffaa\102\uffaa\103\uffaa\104\uffaa\105\uffaa\106\uffaa\107\uffaa" +
    "\110\uffaa\111\uffaa\113\uffaa\114\uffaa\115\uffaa\116\uffaa\117" +
    "\uffaa\120\uffaa\121\uffaa\122\uffaa\123\uffaa\124\uffaa\125\uffaa" +
    "\126\uffaa\127\uffaa\130\uffaa\131\uffaa\133\uffaa\134\uffaa\001" +
    "\002\000\136\034\uffab\037\uffab\042\uffab\043\uffab\044\uffab" +
    "\045\uffab\046\uffab\052\uffab\057\uffab\061\uffab\064\uffab\065" +
    "\uffab\066\uffab\067\uffab\071\uffab\074\uffab\075\uffab\076\uffab" +
    "\077\uffab\100\uffab\101\uffab\102\uffab\103\uffab\104\uffab\105" +
    "\uffab\106\uffab\107\uffab\110\uffab\111\uffab\113\uffab\114\uffab" +
    "\115\uffab\116\uffab\117\uffab\120\uffab\121\uffab\122\uffab\123" +
    "\uffab\124\uffab\125\uffab\126\uffab\127\uffab\130\uffab\131\uffab" +
    "\133\uffab\134\uffab\001\002\000\004\104\122\001\002\000" +
    "\136\034\uffac\037\uffac\042\uffac\043\uffac\044\uffac\045\uffac" +
    "\046\uffac\052\uffac\057\uffac\061\uffac\064\uffac\065\uffac\066" +
    "\uffac\067\uffac\071\uffac\074\uffac\075\uffac\076\uffac\077\uffac" +
    "\100\uffac\101\uffac\102\uffac\103\uffac\104\uffac\105\uffac\106" +
    "\uffac\107\uffac\110\uffac\111\uffac\113\uffac\114\uffac\115\uffac" +
    "\116\uffac\117\uffac\120\uffac\121\uffac\122\uffac\123\uffac\124" +
    "\uffac\125\uffac\126\uffac\127\uffac\130\uffac\131\uffac\133\uffac" +
    "\134\uffac\001\002\000\004\114\124\001\002\000\076\034" +
    "\uffdf\037\uffdf\042\uffdf\043\uffdf\052\uffdf\057\uffdf\061\uffdf" +
    "\064\uffdf\065\uffdf\067\uffdf\071\uffdf\074\uffdf\075\uffdf\077" +
    "\uffdf\101\uffdf\103\uffdf\105\uffdf\107\uffdf\111\uffdf\113\uffdf" +
    "\114\uffdf\115\uffdf\117\uffdf\121\uffdf\123\uffdf\125\uffdf\127" +
    "\uffdf\131\uffdf\133\uffdf\134\uffdf\001\002\000\012\053\uff9e" +
    "\054\uff9e\062\uff9e\063\uff9e\001\002\000\104\034\uffa1\037" +
    "\uffa1\042\uffa1\043\uffa1\044\uffa1\045\uffa1\046\uffa1\052\uffa1" +
    "\057\uffa1\061\uffa1\064\uffa1\065\uffa1\067\uffa1\071\uffa1\074" +
    "\uffa1\075\uffa1\077\uffa1\101\uffa1\103\uffa1\105\uffa1\107\uffa1" +
    "\111\uffa1\113\uffa1\114\uffa1\115\uffa1\117\uffa1\121\uffa1\123" +
    "\uffa1\125\uffa1\127\uffa1\131\uffa1\133\uffa1\134\uffa1\001\002" +
    "\000\012\053\uff9d\054\uff9d\062\uff9d\063\uff9d\001\002\000" +
    "\010\055\140\056\141\060\136\001\002\000\012\053\uff9f" +
    "\054\uff9f\062\uff9f\063\uff9f\001\002\000\012\053\uff9c\054" +
    "\uff9c\062\uff9c\063\uff9c\001\002\000\012\053\134\054\130" +
    "\062\127\063\125\001\002\000\104\034\uffa2\037\uffa2\042" +
    "\uffa2\043\uffa2\044\uffa2\045\uffa2\046\uffa2\052\uffa2\057\uffa2" +
    "\061\uffa2\064\uffa2\065\uffa2\067\uffa2\071\uffa2\074\uffa2\075" +
    "\uffa2\077\uffa2\101\uffa2\103\uffa2\105\uffa2\107\uffa2\111\uffa2" +
    "\113\uffa2\114\uffa2\115\uffa2\117\uffa2\121\uffa2\123\uffa2\125" +
    "\uffa2\127\uffa2\131\uffa2\133\uffa2\134\uffa2\001\002\000\012" +
    "\053\uffa0\054\uffa0\062\uffa0\063\uffa0\001\002\000\062\037" +
    "\060\043\022\052\043\064\052\065\037\067\041\071\040" +
    "\075\036\077\030\101\024\103\056\105\063\107\057\111" +
    "\033\113\046\115\067\117\066\121\065\123\064\125\062" +
    "\127\061\131\025\133\050\134\047\001\002\000\010\055" +
    "\145\056\141\060\136\001\002\000\012\053\uff9a\054\uff9a" +
    "\062\uff9a\063\uff9a\001\002\000\062\037\060\043\022\052" +
    "\043\064\052\065\037\067\041\071\040\075\036\077\030" +
    "\101\024\103\056\105\063\107\057\111\033\113\046\115" +
    "\067\117\066\121\065\123\064\125\062\127\061\131\025" +
    "\133\050\134\047\001\002\000\010\055\uff98\056\uff98\060" +
    "\uff98\001\002\000\004\057\144\001\002\000\010\055\uff96" +
    "\056\uff96\060\uff96\001\002\000\012\053\uff9b\054\uff9b\062" +
    "\uff9b\063\uff9b\001\002\000\010\055\uff99\056\uff99\060\uff99" +
    "\001\002\000\004\061\150\001\002\000\010\055\uff97\056" +
    "\uff97\060\uff97\001\002\000\066\034\ufff4\037\ufff4\042\ufff4" +
    "\043\ufff4\052\ufff4\064\ufff4\065\ufff4\067\ufff4\071\ufff4\075" +
    "\ufff4\077\ufff4\101\ufff4\103\ufff4\105\ufff4\107\ufff4\111\ufff4" +
    "\113\ufff4\115\ufff4\117\ufff4\121\ufff4\123\ufff4\125\ufff4\127" +
    "\ufff4\131\ufff4\133\ufff4\134\ufff4\001\002\000\010\036\ufff5" +
    "\040\ufff5\041\ufff5\001\002\000\046\037\060\043\022\052" +
    "\043\064\052\065\037\067\041\071\040\074\163\075\036" +
    "\077\030\101\024\103\056\105\063\107\057\111\033\113" +
    "\046\131\025\134\047\001\002\000\006\070\156\073\153" +
    "\001\002\000\010\070\uffd0\072\uffd0\073\uffd0\001\002\000" +
    "\104\034\uffd2\037\uffd2\042\uffd2\043\uffd2\044\uffd2\045\uffd2" +
    "\046\uffd2\052\uffd2\057\uffd2\061\uffd2\064\uffd2\065\uffd2\067" +
    "\uffd2\071\uffd2\074\uffd2\075\uffd2\077\uffd2\101\uffd2\103\uffd2" +
    "\105\uffd2\107\uffd2\111\uffd2\113\uffd2\114\uffd2\115\uffd2\117" +
    "\uffd2\121\uffd2\123\uffd2\125\uffd2\127\uffd2\131\uffd2\133\uffd2" +
    "\134\uffd2\001\002\000\010\070\uffd1\072\uffd1\073\uffd1\001" +
    "\002\000\046\037\uffcc\043\uffcc\052\uffcc\064\uffcc\065\uffcc" +
    "\067\uffcc\071\uffcc\074\uffcc\075\uffcc\077\uffcc\101\uffcc\103" +
    "\uffcc\105\uffcc\107\uffcc\111\uffcc\113\uffcc\131\uffcc\134\uffcc" +
    "\001\002\000\046\037\uffcb\043\uffcb\052\uffcb\064\uffcb\065" +
    "\uffcb\067\uffcb\071\uffcb\074\uffcb\075\uffcb\077\uffcb\101\uffcb" +
    "\103\uffcb\105\uffcb\107\uffcb\111\uffcb\113\uffcb\131\uffcb\134" +
    "\uffcb\001\002\000\046\037\060\043\022\052\043\064\052" +
    "\065\037\067\041\071\040\074\166\075\036\077\030\101" +
    "\024\103\056\105\063\107\057\111\033\113\046\131\025" +
    "\134\047\001\002\000\010\070\uffce\072\uffce\073\uffce\001" +
    "\002\000\046\037\uffca\043\uffca\052\uffca\064\uffca\065\uffca" +
    "\067\uffca\071\uffca\074\uffca\075\uffca\077\uffca\101\uffca\103" +
    "\uffca\105\uffca\107\uffca\111\uffca\113\uffca\131\uffca\134\uffca" +
    "\001\002\000\046\037\uffcd\043\uffcd\052\uffcd\064\uffcd\065" +
    "\uffcd\067\uffcd\071\uffcd\074\uffcd\075\uffcd\077\uffcd\101\uffcd" +
    "\103\uffcd\105\uffcd\107\uffcd\111\uffcd\113\uffcd\131\uffcd\134" +
    "\uffcd\001\002\000\010\070\uffcf\072\uffcf\073\uffcf\001\002" +
    "\000\006\072\170\073\153\001\002\000\104\034\uffd3\037" +
    "\uffd3\042\uffd3\043\uffd3\044\uffd3\045\uffd3\046\uffd3\052\uffd3" +
    "\057\uffd3\061\uffd3\064\uffd3\065\uffd3\067\uffd3\071\uffd3\074" +
    "\uffd3\075\uffd3\077\uffd3\101\uffd3\103\uffd3\105\uffd3\107\uffd3" +
    "\111\uffd3\113\uffd3\114\uffd3\115\uffd3\117\uffd3\121\uffd3\123" +
    "\uffd3\125\uffd3\127\uffd3\131\uffd3\133\uffd3\134\uffd3\001\002" +
    "\000\136\034\uffc3\037\uffc3\042\uffc3\043\uffc3\044\uffc3\045" +
    "\uffc3\046\uffc3\052\uffc3\057\uffc3\061\uffc3\064\uffc3\065\uffc3" +
    "\066\uffc3\067\uffc3\071\uffc3\074\uffc3\075\uffc3\076\uffc3\077" +
    "\uffc3\100\uffc3\101\uffc3\102\uffc3\103\uffc3\104\uffc3\105\uffc3" +
    "\106\uffc3\107\uffc3\110\uffc3\111\uffc3\113\uffc3\114\uffc3\115" +
    "\uffc3\116\uffc3\117\uffc3\120\uffc3\121\uffc3\122\uffc3\123\uffc3" +
    "\124\uffc3\125\uffc3\126\uffc3\127\uffc3\130\uffc3\131\uffc3\133" +
    "\uffc3\134\uffc3\001\002\000\046\037\060\064\052\065\037" +
    "\066\176\075\036\077\030\101\024\103\056\105\063\107" +
    "\057\111\033\115\067\117\066\121\065\123\064\125\062" +
    "\127\061\134\047\001\002\000\046\037\uffc0\064\uffc0\065" +
    "\uffc0\066\uffc0\075\uffc0\077\uffc0\101\uffc0\103\uffc0\105\uffc0" +
    "\107\uffc0\111\uffc0\115\uffc0\117\uffc0\121\uffc0\123\uffc0\125" +
    "\uffc0\127\uffc0\134\uffc0\001\002\000\046\037\uffc1\064\uffc1" +
    "\065\uffc1\066\uffc1\075\uffc1\077\uffc1\101\uffc1\103\uffc1\105" +
    "\uffc1\107\uffc1\111\uffc1\115\uffc1\117\uffc1\121\uffc1\123\uffc1" +
    "\125\uffc1\127\uffc1\134\uffc1\001\002\000\046\037\uffbf\064" +
    "\uffbf\065\uffbf\066\uffbf\075\uffbf\077\uffbf\101\uffbf\103\uffbf" +
    "\105\uffbf\107\uffbf\111\uffbf\115\uffbf\117\uffbf\121\uffbf\123" +
    "\uffbf\125\uffbf\127\uffbf\134\uffbf\001\002\000\136\034\uffc4" +
    "\037\uffc4\042\uffc4\043\uffc4\044\uffc4\045\uffc4\046\uffc4\052" +
    "\uffc4\057\uffc4\061\uffc4\064\uffc4\065\uffc4\066\uffc4\067\uffc4" +
    "\071\uffc4\074\uffc4\075\uffc4\076\uffc4\077\uffc4\100\uffc4\101" +
    "\uffc4\102\uffc4\103\uffc4\104\uffc4\105\uffc4\106\uffc4\107\uffc4" +
    "\110\uffc4\111\uffc4\113\uffc4\114\uffc4\115\uffc4\116\uffc4\117" +
    "\uffc4\120\uffc4\121\uffc4\122\uffc4\123\uffc4\124\uffc4\125\uffc4" +
    "\126\uffc4\127\uffc4\130\uffc4\131\uffc4\133\uffc4\134\uffc4\001" +
    "\002\000\046\037\uffc2\064\uffc2\065\uffc2\066\uffc2\075\uffc2" +
    "\077\uffc2\101\uffc2\103\uffc2\105\uffc2\107\uffc2\111\uffc2\115" +
    "\uffc2\117\uffc2\121\uffc2\123\uffc2\125\uffc2\127\uffc2\134\uffc2" +
    "\001\002\000\136\034\uffb1\037\uffb1\042\uffb1\043\uffb1\044" +
    "\uffb1\045\uffb1\046\uffb1\052\uffb1\057\uffb1\061\uffb1\064\uffb1" +
    "\065\uffb1\066\uffb1\067\uffb1\071\uffb1\074\uffb1\075\uffb1\076" +
    "\uffb1\077\uffb1\100\uffb1\101\uffb1\102\uffb1\103\uffb1\104\uffb1" +
    "\105\uffb1\106\uffb1\107\uffb1\110\uffb1\111\uffb1\113\uffb1\114" +
    "\uffb1\115\uffb1\116\uffb1\117\uffb1\120\uffb1\121\uffb1\122\uffb1" +
    "\123\uffb1\124\uffb1\125\uffb1\126\uffb1\127\uffb1\130\uffb1\131" +
    "\uffb1\133\uffb1\134\uffb1\001\002\000\004\076\202\001\002" +
    "\000\136\034\uffb2\037\uffb2\042\uffb2\043\uffb2\044\uffb2\045" +
    "\uffb2\046\uffb2\052\uffb2\057\uffb2\061\uffb2\064\uffb2\065\uffb2" +
    "\066\uffb2\067\uffb2\071\uffb2\074\uffb2\075\uffb2\076\uffb2\077" +
    "\uffb2\100\uffb2\101\uffb2\102\uffb2\103\uffb2\104\uffb2\105\uffb2" +
    "\106\uffb2\107\uffb2\110\uffb2\111\uffb2\113\uffb2\114\uffb2\115" +
    "\uffb2\116\uffb2\117\uffb2\120\uffb2\121\uffb2\122\uffb2\123\uffb2" +
    "\124\uffb2\125\uffb2\126\uffb2\127\uffb2\130\uffb2\131\uffb2\133" +
    "\uffb2\134\uffb2\001\002\000\004\112\205\001\002\000\136" +
    "\034\uffa5\037\uffa5\042\uffa5\043\uffa5\044\uffa5\045\uffa5\046" +
    "\uffa5\052\uffa5\057\uffa5\061\uffa5\064\uffa5\065\uffa5\066\uffa5" +
    "\067\uffa5\071\uffa5\074\uffa5\075\uffa5\076\uffa5\077\uffa5\100" +
    "\uffa5\101\uffa5\102\uffa5\103\uffa5\104\uffa5\105\uffa5\106\uffa5" +
    "\107\uffa5\110\uffa5\111\uffa5\113\uffa5\114\uffa5\115\uffa5\116" +
    "\uffa5\117\uffa5\120\uffa5\121\uffa5\122\uffa5\123\uffa5\124\uffa5" +
    "\125\uffa5\126\uffa5\127\uffa5\130\uffa5\131\uffa5\133\uffa5\134" +
    "\uffa5\001\002\000\136\034\uffa6\037\uffa6\042\uffa6\043\uffa6" +
    "\044\uffa6\045\uffa6\046\uffa6\052\uffa6\057\uffa6\061\uffa6\064" +
    "\uffa6\065\uffa6\066\uffa6\067\uffa6\071\uffa6\074\uffa6\075\uffa6" +
    "\076\uffa6\077\uffa6\100\uffa6\101\uffa6\102\uffa6\103\uffa6\104" +
    "\uffa6\105\uffa6\106\uffa6\107\uffa6\110\uffa6\111\uffa6\113\uffa6" +
    "\114\uffa6\115\uffa6\116\uffa6\117\uffa6\120\uffa6\121\uffa6\122" +
    "\uffa6\123\uffa6\124\uffa6\125\uffa6\126\uffa6\127\uffa6\130\uffa6" +
    "\131\uffa6\133\uffa6\134\uffa6\001\002\000\136\034\uffaf\037" +
    "\uffaf\042\uffaf\043\uffaf\044\uffaf\045\uffaf\046\uffaf\052\uffaf" +
    "\057\uffaf\061\uffaf\064\uffaf\065\uffaf\066\uffaf\067\uffaf\071" +
    "\uffaf\074\uffaf\075\uffaf\076\uffaf\077\uffaf\100\uffaf\101\uffaf" +
    "\102\uffaf\103\uffaf\104\uffaf\105\uffaf\106\uffaf\107\uffaf\110" +
    "\uffaf\111\uffaf\113\uffaf\114\uffaf\115\uffaf\116\uffaf\117\uffaf" +
    "\120\uffaf\121\uffaf\122\uffaf\123\uffaf\124\uffaf\125\uffaf\126" +
    "\uffaf\127\uffaf\130\uffaf\131\uffaf\133\uffaf\134\uffaf\001\002" +
    "\000\004\100\210\001\002\000\136\034\uffb0\037\uffb0\042" +
    "\uffb0\043\uffb0\044\uffb0\045\uffb0\046\uffb0\052\uffb0\057\uffb0" +
    "\061\uffb0\064\uffb0\065\uffb0\066\uffb0\067\uffb0\071\uffb0\074" +
    "\uffb0\075\uffb0\076\uffb0\077\uffb0\100\uffb0\101\uffb0\102\uffb0" +
    "\103\uffb0\104\uffb0\105\uffb0\106\uffb0\107\uffb0\110\uffb0\111" +
    "\uffb0\113\uffb0\114\uffb0\115\uffb0\116\uffb0\117\uffb0\120\uffb0" +
    "\121\uffb0\122\uffb0\123\uffb0\124\uffb0\125\uffb0\126\uffb0\127" +
    "\uffb0\130\uffb0\131\uffb0\133\uffb0\134\uffb0\001\002\000\104" +
    "\034\uffa3\037\uffa3\042\uffa3\043\uffa3\044\uffa3\045\uffa3\046" +
    "\uffa3\052\uffa3\057\uffa3\061\uffa3\064\uffa3\065\uffa3\067\uffa3" +
    "\071\uffa3\074\uffa3\075\uffa3\077\uffa3\101\uffa3\103\uffa3\105" +
    "\uffa3\107\uffa3\111\uffa3\113\uffa3\114\uffa3\115\uffa3\117\uffa3" +
    "\121\uffa3\123\uffa3\125\uffa3\127\uffa3\131\uffa3\133\uffa3\134" +
    "\uffa3\001\002\000\004\132\213\001\002\000\104\034\uffa4" +
    "\037\uffa4\042\uffa4\043\uffa4\044\uffa4\045\uffa4\046\uffa4\052" +
    "\uffa4\057\uffa4\061\uffa4\064\uffa4\065\uffa4\067\uffa4\071\uffa4" +
    "\074\uffa4\075\uffa4\077\uffa4\101\uffa4\103\uffa4\105\uffa4\107" +
    "\uffa4\111\uffa4\113\uffa4\114\uffa4\115\uffa4\117\uffa4\121\uffa4" +
    "\123\uffa4\125\uffa4\127\uffa4\131\uffa4\133\uffa4\134\uffa4\001" +
    "\002\000\136\034\uffad\037\uffad\042\uffad\043\uffad\044\uffad" +
    "\045\uffad\046\uffad\052\uffad\057\uffad\061\uffad\064\uffad\065" +
    "\uffad\066\uffad\067\uffad\071\uffad\074\uffad\075\uffad\076\uffad" +
    "\077\uffad\100\uffad\101\uffad\102\uffad\103\uffad\104\uffad\105" +
    "\uffad\106\uffad\107\uffad\110\uffad\111\uffad\113\uffad\114\uffad" +
    "\115\uffad\116\uffad\117\uffad\120\uffad\121\uffad\122\uffad\123" +
    "\uffad\124\uffad\125\uffad\126\uffad\127\uffad\130\uffad\131\uffad" +
    "\133\uffad\134\uffad\001\002\000\004\102\216\001\002\000" +
    "\136\034\uffae\037\uffae\042\uffae\043\uffae\044\uffae\045\uffae" +
    "\046\uffae\052\uffae\057\uffae\061\uffae\064\uffae\065\uffae\066" +
    "\uffae\067\uffae\071\uffae\074\uffae\075\uffae\076\uffae\077\uffae" +
    "\100\uffae\101\uffae\102\uffae\103\uffae\104\uffae\105\uffae\106" +
    "\uffae\107\uffae\110\uffae\111\uffae\113\uffae\114\uffae\115\uffae" +
    "\116\uffae\117\uffae\120\uffae\121\uffae\122\uffae\123\uffae\124" +
    "\uffae\125\uffae\126\uffae\127\uffae\130\uffae\131\uffae\133\uffae" +
    "\134\uffae\001\002\000\076\034\uffdd\037\uffdd\042\uffdd\043" +
    "\uffdd\052\uffdd\057\uffdd\061\uffdd\064\uffdd\065\uffdd\067\uffdd" +
    "\071\uffdd\074\uffdd\075\uffdd\077\uffdd\101\uffdd\103\uffdd\105" +
    "\uffdd\107\uffdd\111\uffdd\113\uffdd\114\uffdd\115\uffdd\117\uffdd" +
    "\121\uffdd\123\uffdd\125\uffdd\127\uffdd\131\uffdd\133\uffdd\134" +
    "\uffdd\001\002\000\066\037\uffd8\044\uffd8\045\uffd8\046\uffd8" +
    "\052\uffd8\064\uffd8\065\uffd8\067\uffd8\071\uffd8\075\uffd8\077" +
    "\uffd8\101\uffd8\103\uffd8\105\uffd8\107\uffd8\111\uffd8\113\uffd8" +
    "\115\uffd8\117\uffd8\121\uffd8\123\uffd8\125\uffd8\127\uffd8\131" +
    "\uffd8\133\uffd8\134\uffd8\001\002\000\066\037\uffd9\044\uffd9" +
    "\045\uffd9\046\uffd9\052\uffd9\064\uffd9\065\uffd9\067\uffd9\071" +
    "\uffd9\075\uffd9\077\uffd9\101\uffd9\103\uffd9\105\uffd9\107\uffd9" +
    "\111\uffd9\113\uffd9\115\uffd9\117\uffd9\121\uffd9\123\uffd9\125" +
    "\uffd9\127\uffd9\131\uffd9\133\uffd9\134\uffd9\001\002\000\070" +
    "\037\uffe2\044\uffe2\045\uffe2\046\uffe2\052\uffe2\064\uffe2\065" +
    "\uffe2\067\uffe2\071\uffe2\075\uffe2\077\uffe2\101\uffe2\103\uffe2" +
    "\105\uffe2\107\uffe2\111\uffe2\113\uffe2\114\uffe2\115\uffe2\117" +
    "\uffe2\121\uffe2\123\uffe2\125\uffe2\127\uffe2\131\uffe2\133\uffe2" +
    "\134\uffe2\001\002\000\070\037\uffe1\044\uffe1\045\uffe1\046" +
    "\uffe1\052\uffe1\064\uffe1\065\uffe1\067\uffe1\071\uffe1\075\uffe1" +
    "\077\uffe1\101\uffe1\103\uffe1\105\uffe1\107\uffe1\111\uffe1\113" +
    "\uffe1\114\uffe1\115\uffe1\117\uffe1\121\uffe1\123\uffe1\125\uffe1" +
    "\127\uffe1\131\uffe1\133\uffe1\134\uffe1\001\002\000\066\037" +
    "\uffda\044\uffda\045\uffda\046\uffda\052\uffda\064\uffda\065\uffda" +
    "\067\uffda\071\uffda\075\uffda\077\uffda\101\uffda\103\uffda\105" +
    "\uffda\107\uffda\111\uffda\113\uffda\115\uffda\117\uffda\121\uffda" +
    "\123\uffda\125\uffda\127\uffda\131\uffda\133\uffda\134\uffda\001" +
    "\002\000\004\050\244\001\002\000\070\037\uffec\044\uffec" +
    "\045\uffec\046\uffec\052\uffec\064\uffec\065\uffec\067\uffec\071" +
    "\uffec\075\uffec\077\uffec\101\uffec\103\uffec\105\uffec\107\uffec" +
    "\111\uffec\113\uffec\114\uffec\115\uffec\117\uffec\121\uffec\123" +
    "\uffec\125\uffec\127\uffec\131\uffec\133\uffec\134\uffec\001\002" +
    "\000\070\037\uffe3\044\uffe3\045\uffe3\046\uffe3\052\uffe3\064" +
    "\uffe3\065\uffe3\067\uffe3\071\uffe3\075\uffe3\077\uffe3\101\uffe3" +
    "\103\uffe3\105\uffe3\107\uffe3\111\uffe3\113\uffe3\114\uffe3\115" +
    "\uffe3\117\uffe3\121\uffe3\123\uffe3\125\uffe3\127\uffe3\131\uffe3" +
    "\133\uffe3\134\uffe3\001\002\000\060\037\060\052\043\064" +
    "\052\065\037\067\041\071\040\075\036\077\030\101\024" +
    "\103\056\105\063\107\057\111\033\113\230\115\067\117" +
    "\066\121\065\123\064\125\062\127\061\131\025\133\231" +
    "\134\047\001\002\000\070\037\uffeb\044\uffeb\045\uffeb\046" +
    "\uffeb\052\uffeb\064\uffeb\065\uffeb\067\uffeb\071\uffeb\075\uffeb" +
    "\077\uffeb\101\uffeb\103\uffeb\105\uffeb\107\uffeb\111\uffeb\113" +
    "\uffeb\114\uffeb\115\uffeb\117\uffeb\121\uffeb\123\uffeb\125\uffeb" +
    "\127\uffeb\131\uffeb\133\uffeb\134\uffeb\001\002\000\070\037" +
    "\uffe0\044\uffe0\045\uffe0\046\uffe0\052\uffe0\064\uffe0\065\uffe0" +
    "\067\uffe0\071\uffe0\075\uffe0\077\uffe0\101\uffe0\103\uffe0\105" +
    "\uffe0\107\uffe0\111\uffe0\113\uffe0\114\uffe0\115\uffe0\117\uffe0" +
    "\121\uffe0\123\uffe0\125\uffe0\127\uffe0\131\uffe0\133\uffe0\134" +
    "\uffe0\001\002\000\070\037\uffe4\044\uffe4\045\uffe4\046\uffe4" +
    "\052\uffe4\064\uffe4\065\uffe4\067\uffe4\071\uffe4\075\uffe4\077" +
    "\uffe4\101\uffe4\103\uffe4\105\uffe4\107\uffe4\111\uffe4\113\uffe4" +
    "\114\uffe4\115\uffe4\117\uffe4\121\uffe4\123\uffe4\125\uffe4\127" +
    "\uffe4\131\uffe4\133\uffe4\134\uffe4\001\002\000\070\037\uffed" +
    "\044\uffed\045\uffed\046\uffed\052\uffed\064\uffed\065\uffed\067" +
    "\uffed\071\uffed\075\uffed\077\uffed\101\uffed\103\uffed\105\uffed" +
    "\107\uffed\111\uffed\113\uffed\114\uffed\115\uffed\117\uffed\121" +
    "\uffed\123\uffed\125\uffed\127\uffed\131\uffed\133\uffed\134\uffed" +
    "\001\002\000\066\037\060\044\237\045\221\046\225\052" +
    "\043\064\052\065\037\067\041\071\040\075\036\077\030" +
    "\101\024\103\056\105\063\107\057\111\033\113\230\115" +
    "\067\117\066\121\065\123\064\125\062\127\061\131\025" +
    "\133\231\134\047\001\002\000\070\037\uffee\044\uffee\045" +
    "\uffee\046\uffee\052\uffee\064\uffee\065\uffee\067\uffee\071\uffee" +
    "\075\uffee\077\uffee\101\uffee\103\uffee\105\uffee\107\uffee\111" +
    "\uffee\113\uffee\114\uffee\115\uffee\117\uffee\121\uffee\123\uffee" +
    "\125\uffee\127\uffee\131\uffee\133\uffee\134\uffee\001\002\000" +
    "\076\034\uffdc\037\uffdc\042\uffdc\043\uffdc\052\uffdc\057\uffdc" +
    "\061\uffdc\064\uffdc\065\uffdc\067\uffdc\071\uffdc\074\uffdc\075" +
    "\uffdc\077\uffdc\101\uffdc\103\uffdc\105\uffdc\107\uffdc\111\uffdc" +
    "\113\uffdc\114\uffdc\115\uffdc\117\uffdc\121\uffdc\123\uffdc\125" +
    "\uffdc\127\uffdc\131\uffdc\133\uffdc\134\uffdc\001\002\000\066" +
    "\037\uffdb\044\uffdb\045\uffdb\046\uffdb\052\uffdb\064\uffdb\065" +
    "\uffdb\067\uffdb\071\uffdb\075\uffdb\077\uffdb\101\uffdb\103\uffdb" +
    "\105\uffdb\107\uffdb\111\uffdb\113\uffdb\115\uffdb\117\uffdb\121" +
    "\uffdb\123\uffdb\125\uffdb\127\uffdb\131\uffdb\133\uffdb\134\uffdb" +
    "\001\002\000\004\114\242\001\002\000\070\037\uffde\044" +
    "\uffde\045\uffde\046\uffde\052\uffde\064\uffde\065\uffde\067\uffde" +
    "\071\uffde\075\uffde\077\uffde\101\uffde\103\uffde\105\uffde\107" +
    "\uffde\111\uffde\113\uffde\114\uffde\115\uffde\117\uffde\121\uffde" +
    "\123\uffde\125\uffde\127\uffde\131\uffde\133\uffde\134\uffde\001" +
    "\002\000\006\047\251\050\244\001\002\000\004\037\246" +
    "\001\002\000\006\047\uffd5\050\uffd5\001\002\000\004\051" +
    "\247\001\002\000\006\047\uffd4\050\uffd4\001\002\000\006" +
    "\047\uffd6\050\uffd6\001\002\000\066\037\uffd7\044\uffd7\045" +
    "\uffd7\046\uffd7\052\uffd7\064\uffd7\065\uffd7\067\uffd7\071\uffd7" +
    "\075\uffd7\077\uffd7\101\uffd7\103\uffd7\105\uffd7\107\uffd7\111" +
    "\uffd7\113\uffd7\115\uffd7\117\uffd7\121\uffd7\123\uffd7\125\uffd7" +
    "\127\uffd7\131\uffd7\133\uffd7\134\uffd7\001\002\000\004\002" +
    "\001\001\002\000\064\034\255\037\060\043\022\052\043" +
    "\064\052\065\037\067\041\071\040\075\036\077\030\101" +
    "\024\103\056\105\063\107\057\111\033\113\046\115\067" +
    "\117\066\121\065\123\064\125\062\127\061\131\025\133" +
    "\050\134\047\001\002\000\004\005\ufffd\001\002\000\004" +
    "\005\ufffc\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\254\000\004\002\003\001\001\000\002\001\001\000" +
    "\010\003\007\004\005\005\010\001\001\000\002\001\001" +
    "\000\034\037\252\040\033\041\030\042\054\043\043\050" +
    "\044\053\025\054\026\055\050\060\034\061\052\064\022" +
    "\065\031\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\035\016\036\014\001\001\000\034\037\041\040\033" +
    "\041\030\042\054\043\043\050\044\053\025\054\026\055" +
    "\050\060\034\061\052\064\022\065\031\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\036" +
    "\020\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\042\233\043\225\044\234\045\223\050\226\053\221\054" +
    "\222\055\231\060\034\061\052\073\217\074\235\075\232" +
    "\001\001\000\002\001\001\000\010\043\214\060\034\061" +
    "\052\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\043\206\060\034\061\052\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\043\200\060\034\061" +
    "\052\001\001\000\016\042\172\043\174\060\034\061\052" +
    "\062\171\063\173\001\001\000\006\051\154\052\166\001" +
    "\001\000\006\051\154\052\153\001\001\000\032\040\150" +
    "\041\030\042\054\043\043\050\044\053\025\054\026\055" +
    "\050\060\034\061\052\064\022\065\031\001\001\000\010" +
    "\070\131\071\132\072\130\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\040\122\041\030\042\054\043\043" +
    "\050\044\053\025\054\026\055\050\060\034\061\052\064" +
    "\022\065\031\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\043\120\060\034" +
    "\061\052\001\001\000\010\043\114\060\034\061\052\001" +
    "\001\000\002\001\001\000\010\043\112\060\034\061\052" +
    "\001\001\000\010\043\107\060\034\061\052\001\001\000" +
    "\010\043\104\060\034\061\052\001\001\000\010\043\101" +
    "\060\034\061\052\001\001\000\010\043\076\060\034\061" +
    "\052\001\001\000\010\043\073\060\034\061\052\001\001" +
    "\000\010\043\070\060\034\061\052\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\066\141\067" +
    "\136\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\070\131\072\134\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\040\146\041\030\042\054\043\043\050\044" +
    "\053\025\054\026\055\050\060\034\061\052\064\022\065" +
    "\031\001\001\000\004\066\145\001\001\000\002\001\001" +
    "\000\032\040\142\041\030\042\054\043\043\050\044\053" +
    "\025\054\026\055\050\060\034\061\052\064\022\065\031" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\041\160\043\163\050\044\053\025\054\026\055\050" +
    "\056\161\057\157\060\034\061\052\064\022\065\031\001" +
    "\001\000\004\051\156\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\041\160\043\163\050\044\053\025\054\026" +
    "\055\050\057\164\060\034\061\052\064\022\065\031\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\051\156\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\042\172\043\174\060\034" +
    "\061\052\063\176\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\046\244\047\242\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\042\233" +
    "\043\225\050\226\053\221\054\222\055\231\060\034\061" +
    "\052\073\240\074\235\075\232\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\042\233\043\225\045\237\050\226\053\221\054\222" +
    "\055\231\060\034\061\052\073\217\074\235\075\232\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\046\247\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\040\150\041\030\042\054\043\043" +
    "\050\044\053\025\054\026\055\050\060\034\061\052\064" +
    "\022\065\031\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
    public void report_error(String message, Object info) {
   
     
        StringBuffer m = new StringBuffer("Error");
   
        
        if (info instanceof java_cup.runtime.Symbol) {
            
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
   
            
            if (s.left >= 0) {                
                
                m.append(" in line "+(s.left+1));   
               
                if (s.right >= 0)                    
                    
                    m.append(", column "+(s.right+1));
            }
        }

        m.append(" : "+message);

        System.err.println(m);
    }
   
    
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // html_tag ::= HTML html_content EHTML 
            {
              Node RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String h = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector c = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                   Node nh = new Node(h,c);
                   Node ne = new Node(e,null);
                   Vector v = new Vector();
                   v.addElement(nh);
                   v.addElement(ne);

                   RESULT = new Node("document", v);
                   RESULT.resultPrinter(RESULT,0);
                  
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("html_tag",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= html_tag EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node start_val = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // html_content ::= body_tag 
            {
              Vector RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Vector b = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                     RESULT = b;
                     
                   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("html_content",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // html_content ::= frameset_tag 
            {
              Vector RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Vector f = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                     RESULT = f;
                   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("html_content",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // body_tag ::= BODY EBODY 
            {
              Vector RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                     Node nt = new Node(f, null);
                     Node ne = new Node(e, null);
                     Vector v1 = new Vector();
                     v1.addElement(nt);
                     v1.addElement(ne);
                     RESULT = v1;
      
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("body_tag",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // body_tag ::= BODY body_contents EBODY 
            {
              Vector RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector bc = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        Node nf = new Node(f, bc);
                        Node ne = new Node(e, null);
                        Vector v1 = new Vector();
                        v1.addElement(nf);
                        v1.addElement(ne);
                        RESULT = v1;
                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("body_tag",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // frameset_tag ::= FRAMESET frameset_contents EFRAMESET 
            {
              Vector RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector fs = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        Node nf = new Node(f, fs);
                        Node ne = new Node(e, null);
                        Vector v1 = new Vector();
                        v1.addElement(nf);
                        v1.addElement(ne);
                        RESULT = v1;
                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("frameset_tag",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // frameset_tag ::= FRAMESET EFRAMESET 
            {
              Vector RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        Node nf = new Node(f, null);
                        Node ne = new Node(e, null);
                        Vector v1 = new Vector();
                        v1.addElement(nf);
                        v1.addElement(ne);
                        RESULT = v1;
                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("frameset_tag",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // frameset_contents ::= frameset_contents frameset_content 
            {
              Vector RESULT =null;
		int fsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector fs = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Vector f = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                            Enumeration e = f.elements();
		            while (e.hasMoreElements()) 
	      	              fs.addElement((Node) e.nextElement()); 
                            RESULT = fs;   
                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("frameset_contents",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // frameset_contents ::= frameset_content 
            {
              Vector RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Vector f = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                           RESULT = f;   
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("frameset_contents",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // frameset_content ::= FRAME 
            {
              Vector RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                         Node nf = new Node(f, null);
                         Vector v1 = new Vector();
                         v1.addElement(nf);
                         RESULT = v1;
                       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("frameset_content",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // frameset_content ::= NOFRAMES ENOFRAMES 
            {
              Vector RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                           Node nf = new Node(f, null);
                           Node ne = new Node(e, null);
                           Vector v1 = new Vector();
                           v1.addElement(nf);
                           v1.addElement(ne);
                           RESULT = v1;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("frameset_content",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // frameset_content ::= NOFRAMES body_contents ENOFRAMES 
            {
              Vector RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector bc = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            Node nf = new Node(f, bc);
                            Node ne = new Node(e, null);
                            Vector v1 = new Vector();
                            v1.addElement(nf);
                            v1.addElement(ne);
                            RESULT = v1;
                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("frameset_content",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // body_contents ::= body_contents body_content 
            {
              Vector RESULT =null;
		int fsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector fs = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Vector f = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                            Enumeration e = f.elements();
		            while (e.hasMoreElements()) 
	      	              fs.addElement((Node) e.nextElement()); 
                            RESULT = fs;   
                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("body_contents",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // body_contents ::= body_content 
            {
              Vector RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Vector f = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                           RESULT = f;   
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("body_contents",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // body_content ::= block 
            {
              Vector RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Vector b = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                         RESULT = b;
                       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("body_content",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // body_content ::= heading 
            {
              Vector RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Vector h = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                         RESULT = h;
                       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("body_content",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // body_content ::= text 
            {
              Vector RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Vector t = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                         RESULT = t;
                       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("body_content",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // body_content ::= HR 
            {
              Vector RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                         Node nf = new Node(f, null);
                         Vector v1 = new Vector();
                         v1.addElement(nf);
                         RESULT = v1;
                       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("body_content",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // form_body_content ::= form_block 
            {
              Vector RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Vector b = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                         RESULT = b;
                       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("form_body_content",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // form_body_content ::= heading 
            {
              Vector RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Vector h = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                         RESULT = h;
                       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("form_body_content",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // form_body_content ::= text 
            {
              Vector RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Vector t = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                         RESULT = t;
                       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("form_body_content",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // form_body_content ::= HR 
            {
              Vector RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                         Node nf = new Node(f, null);
                         Vector v1 = new Vector();
                         v1.addElement(nf);
                         RESULT = v1;
                       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("form_body_content",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // block ::= center_tag 
            {
              Vector RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Vector o = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            RESULT = o;
                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // block ::= form_tag 
            {
              Vector RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Vector o = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            RESULT = o;
                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // block ::= ol_tag 
            {
              Vector RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Vector o = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            RESULT = o;
                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // block ::= p_tag 
            {
              Vector RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Vector o = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            RESULT = o;
                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // block ::= table_tag 
            {
              Vector RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Vector o = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            RESULT = o;
                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // block ::= ul_tag 
            {
              Vector RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Vector o = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            RESULT = o;
                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // form_block ::= form_center_tag 
            {
              Vector RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Vector o = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            RESULT = o;
                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("form_block",58, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // form_block ::= ol_tag 
            {
              Vector RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Vector o = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            RESULT = o;
                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("form_block",58, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // form_block ::= p_tag 
            {
              Vector RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Vector o = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            RESULT = o;
                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("form_block",58, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // form_block ::= table_tag 
            {
              Vector RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Vector o = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            RESULT = o;
                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("form_block",58, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // form_block ::= ul_tag 
            {
              Vector RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Vector o = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            RESULT = o;
                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("form_block",58, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // center_tag ::= CENTER body_content ECENTER 
            {
              Vector RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector bc = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            Node nf = new Node(f, bc);
                            Node ne = new Node(e, null);
                            Vector v1 = new Vector();
                            v1.addElement(nf);
                            v1.addElement(ne);
                            RESULT = v1;
                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("center_tag",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // form_center_tag ::= CENTER form_body_content ECENTER 
            {
              Vector RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector bc = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            Node nf = new Node(f, bc);
                            Node ne = new Node(e, null);
                            Vector v1 = new Vector();
                            v1.addElement(nf);
                            v1.addElement(ne);
                            RESULT = v1;
                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("form_center_tag",59, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // form_tag ::= FORM EFORM 
            {
              Vector RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            Node nf = new Node(f, null);
                            Node ne = new Node(e, null);
                            Vector v1 = new Vector();
                            v1.addElement(nf);
                            v1.addElement(ne);
                            RESULT = v1;
                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("form_tag",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // form_tag ::= FORM form_contents EFORM 
            {
              Vector RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector fc = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            Node nf = new Node(f, fc);
                            Node ne = new Node(e, null);
                            Vector v1 = new Vector();
                            v1.addElement(nf);
                            v1.addElement(ne);
                            RESULT = v1;
                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("form_tag",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // form_contents ::= form_contents form_content 
            {
              Vector RESULT =null;
		int fsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector fs = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Vector f = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                            Enumeration e = f.elements();
		            while (e.hasMoreElements()) 
	      	              fs.addElement((Node) e.nextElement()); 
                            RESULT = fs;   
                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("form_contents",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // form_contents ::= form_content 
            {
              Vector RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Vector f = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                           RESULT = f;   
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("form_contents",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // form_content ::= INPUT 
            {
              Vector RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                          Node nf = new Node(f, null);
                          Vector v1 = new Vector();
                          v1.addElement(nf);
                          RESULT = v1;
                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("form_content",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // form_content ::= form_body_content 
            {
              Vector RESULT =null;
		int bcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Vector bc = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            RESULT = bc;
                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("form_content",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // form_content ::= SELECT options ESELECT 
            {
              Vector RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector bc = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                              Node nf = new Node(f, bc);
                              Node ne = new Node(e, null);
                              Vector v1 = new Vector();
                              v1.addElement(nf);
                              v1.addElement(ne);
                              RESULT = v1;
                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("form_content",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // options ::= options option 
            {
              Vector RESULT =null;
		int fsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector fs = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Vector f = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                            Enumeration e = f.elements();
		            while (e.hasMoreElements()) 
	      	              fs.addElement((Node) e.nextElement()); 
                            RESULT = fs;   
                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("options",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // options ::= option 
            {
              Vector RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Vector f = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                           RESULT = f;   
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("options",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // option ::= OPTION TEXT EOPTION 
            {
              Vector RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                              Node bc = new Node(t, null);
                              Vector v = new Vector();
                              v.addElement(bc);
                              Node nf = new Node(f, v);
                              Node ne = new Node(e, null);
                              Vector v1 = new Vector();
                              v1.addElement(nf);
                              v1.addElement(ne);
                              RESULT = v1;
                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("option",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ol_tag ::= OL li_tags EOL 
            {
              Vector RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector bc = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                              Node nf = new Node(f, bc);
                              Node ne = new Node(e, null);
                              Vector v1 = new Vector();
                              v1.addElement(nf);
                              v1.addElement(ne);
                              RESULT = v1;
                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ol_tag",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ul_tag ::= UL li_tags EUL 
            {
              Vector RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector bc = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                              Node nf = new Node(f, bc);
                              Node ne = new Node(e, null);
                              Vector v1 = new Vector();
                              v1.addElement(nf);
                              v1.addElement(ne);
                              RESULT = v1;
                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ul_tag",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // li_tags ::= li_tags li_tag 
            {
              Vector RESULT =null;
		int fsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector fs = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Vector f = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                            Enumeration e = f.elements();
		            while (e.hasMoreElements()) 
	      	              fs.addElement((Node) e.nextElement()); 
                            RESULT = fs;   
                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("li_tags",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // li_tags ::= li_tag 
            {
              Vector RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Vector f = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                           RESULT = f;   
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("li_tags",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // li_tag ::= LI flows ELI 
            {
              Vector RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector bc = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                              Node nf = new Node(f, bc);
                              Node ne = new Node(e, null);
                              Vector v1 = new Vector();
                              v1.addElement(nf);
                              v1.addElement(ne);
                              RESULT = v1;
                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("li_tag",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // li_tag ::= LI ELI 
            {
              Vector RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                              Node nf = new Node(f, null);
                              Node ne = new Node(e, null);
                              Vector v1 = new Vector();
                              v1.addElement(nf);
                              v1.addElement(ne);
                              RESULT = v1;
                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("li_tag",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // flows ::= flows flow 
            {
              Vector RESULT =null;
		int fsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector fs = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Vector f = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                            Enumeration e = f.elements();
		            while (e.hasMoreElements()) 
	      	              fs.addElement((Node) e.nextElement()); 
                            RESULT = fs;   
                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("flows",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // flows ::= flow 
            {
              Vector RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Vector f = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                             RESULT = f;   
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("flows",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // flow ::= block 
            {
              Vector RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Vector b = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                             RESULT = b;   
                           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("flow",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // flow ::= text 
            {
              Vector RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Vector t = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                             RESULT = t;   
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("flow",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // text ::= BR 
            {
              Vector RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                              Node nf = new Node(f, null);
                              Vector v1 = new Vector();
                              v1.addElement(nf);
                              RESULT = v1;
                           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("text",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // text ::= IMG 
            {
              Vector RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                              Node nf = new Node(f, null);
                              Vector v1 = new Vector();
                              v1.addElement(nf);
                              RESULT = v1;
                           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("text",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // text ::= a_tag 
            {
              Vector RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Vector t = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                             RESULT = t;   
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("text",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // text ::= TEXT 
            {
              Vector RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                              Node nf = new Node(t, null);
                              Vector v1 = new Vector();
                              v1.addElement(nf);
                              RESULT = v1;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("text",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // text ::= physical_style 
            {
              Vector RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Vector t = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                RESULT = t;   
                             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("text",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // a_tag ::= A a_contents EA 
            {
              Vector RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector bc = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                              Node nf = new Node(f, bc);
                              Node ne = new Node(e, null);
                              Vector v1 = new Vector();
                              v1.addElement(nf);
                              v1.addElement(ne);
                              RESULT = v1;
                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("a_tag",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // a_tag ::= A EA 
            {
              Vector RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                              Node nf = new Node(f, null);
                              Node ne = new Node(e, null);
                              Vector v1 = new Vector();
                              v1.addElement(nf);
                              v1.addElement(ne);
                              RESULT = v1;
                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("a_tag",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // a_contents ::= a_contents a_content 
            {
              Vector RESULT =null;
		int fsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector fs = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Vector f = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                            Enumeration e = f.elements();
		            while (e.hasMoreElements()) 
	      	              fs.addElement((Node) e.nextElement()); 
                            RESULT = fs;   
                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("a_contents",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // a_contents ::= a_content 
            {
              Vector RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Vector f = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                             RESULT = f;   
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("a_contents",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // a_content ::= heading 
            {
              Vector RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Vector h = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                             RESULT = h;   
                           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("a_content",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // a_content ::= text 
            {
              Vector RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Vector t = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                             RESULT = t;   
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("a_content",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // heading ::= H1 text EH1 
            {
              Vector RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector bc = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                               Node nf = new Node(f, bc);
                               Node ne = new Node(e, null);
                               Vector v1 = new Vector();
                               v1.addElement(nf);
                               v1.addElement(ne);
                               RESULT = v1;
                           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("heading",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // heading ::= H1 EH1 
            {
              Vector RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                               Node nf = new Node(f, null);
                               Node ne = new Node(e, null);
                               Vector v1 = new Vector();
                               v1.addElement(nf);
                               v1.addElement(ne);
                               RESULT = v1;
                           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("heading",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // heading ::= H2 text EH2 
            {
              Vector RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector bc = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                               Node nf = new Node(f, bc);
                               Node ne = new Node(e, null);
                               Vector v1 = new Vector();
                               v1.addElement(nf);
                               v1.addElement(ne);
                               RESULT = v1;
                           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("heading",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // heading ::= H2 EH2 
            {
              Vector RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                               Node nf = new Node(f, null);
                               Node ne = new Node(e, null);
                               Vector v1 = new Vector();
                               v1.addElement(nf);
                               v1.addElement(ne);
                               RESULT = v1;
                           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("heading",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // heading ::= H3 text EH3 
            {
              Vector RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector bc = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                               Node nf = new Node(f, bc);
                               Node ne = new Node(e, null);
                               Vector v1 = new Vector();
                               v1.addElement(nf);
                               v1.addElement(ne);
                               RESULT = v1;
                           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("heading",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // heading ::= H3 EH3 
            {
              Vector RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                               Node nf = new Node(f, null);
                               Node ne = new Node(e, null);
                               Vector v1 = new Vector();
                               v1.addElement(nf);
                               v1.addElement(ne);
                               RESULT = v1;
                           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("heading",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // heading ::= H4 text EH4 
            {
              Vector RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector bc = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                               Node nf = new Node(f, bc);
                               Node ne = new Node(e, null);
                               Vector v1 = new Vector();
                               v1.addElement(nf);
                               v1.addElement(ne);
                               RESULT = v1;
                           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("heading",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // heading ::= H4 EH4 
            {
              Vector RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                               Node nf = new Node(f, null);
                               Node ne = new Node(e, null);
                               Vector v1 = new Vector();
                               v1.addElement(nf);
                               v1.addElement(ne);
                               RESULT = v1;
                           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("heading",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // heading ::= H5 text EH5 
            {
              Vector RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector bc = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                               Node nf = new Node(f, bc);
                               Node ne = new Node(e, null);
                               Vector v1 = new Vector();
                               v1.addElement(nf);
                               v1.addElement(ne);
                               RESULT = v1;
                           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("heading",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // heading ::= H5 EH5 
            {
              Vector RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                               Node nf = new Node(f, null);
                               Node ne = new Node(e, null);
                               Vector v1 = new Vector();
                               v1.addElement(nf);
                               v1.addElement(ne);
                               RESULT = v1;
                           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("heading",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // heading ::= H6 text EH6 
            {
              Vector RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector bc = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                               Node nf = new Node(f, bc);
                               Node ne = new Node(e, null);
                               Vector v1 = new Vector();
                               v1.addElement(nf);
                               v1.addElement(ne);
                               RESULT = v1;
                           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("heading",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // heading ::= H6 EH6 
            {
              Vector RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                               Node nf = new Node(f, null);
                               Node ne = new Node(e, null);
                               Vector v1 = new Vector();
                               v1.addElement(nf);
                               v1.addElement(ne);
                               RESULT = v1;
                           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("heading",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // physical_style ::= B text EB 
            {
              Vector RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector bc = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                               Node nf = new Node(f, bc);
                               Node ne = new Node(e, null);
                               Vector v1 = new Vector();
                               v1.addElement(nf);
                               v1.addElement(ne);
                               RESULT = v1;
                           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("physical_style",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // physical_style ::= B EB 
            {
              Vector RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                               Node nf = new Node(f, null);
                               Node ne = new Node(e, null);
                               Vector v1 = new Vector();
                               v1.addElement(nf);
                               v1.addElement(ne);
                               RESULT = v1;
                           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("physical_style",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // physical_style ::= I text EI 
            {
              Vector RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector bc = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                               Node nf = new Node(f, bc);
                               Node ne = new Node(e, null);
                               Vector v1 = new Vector();
                               v1.addElement(nf);
                               v1.addElement(ne);
                               RESULT = v1;
                           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("physical_style",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // physical_style ::= I EI 
            {
              Vector RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                               Node nf = new Node(f, null);
                               Node ne = new Node(e, null);
                               Vector v1 = new Vector();
                               v1.addElement(nf);
                               v1.addElement(ne);
                               RESULT = v1;
                           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("physical_style",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // physical_style ::= U text EU 
            {
              Vector RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector bc = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                               Node nf = new Node(f, bc);
                               Node ne = new Node(e, null);
                               Vector v1 = new Vector();
                               v1.addElement(nf);
                               v1.addElement(ne);
                               RESULT = v1;
                           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("physical_style",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // physical_style ::= U EU 
            {
              Vector RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                               Node nf = new Node(f, null);
                               Node ne = new Node(e, null);
                               Vector v1 = new Vector();
                               v1.addElement(nf);
                               v1.addElement(ne);
                               RESULT = v1;
                           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("physical_style",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // physical_style ::= SMALL text ESMALL 
            {
              Vector RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector bc = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                               Node nf = new Node(f, bc);
                               Node ne = new Node(e, null);
                               Vector v1 = new Vector();
                               v1.addElement(nf);
                               v1.addElement(ne);
                               RESULT = v1;
                           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("physical_style",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // physical_style ::= SMALL ESMALL 
            {
              Vector RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                               Node nf = new Node(f, null);
                               Node ne = new Node(e, null);
                               Vector v1 = new Vector();
                               v1.addElement(nf);
                               v1.addElement(ne);
                               RESULT = v1;
                           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("physical_style",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // physical_style ::= SUP text ESUP 
            {
              Vector RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector bc = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                               Node nf = new Node(f, bc);
                               Node ne = new Node(e, null);
                               Vector v1 = new Vector();
                               v1.addElement(nf);
                               v1.addElement(ne);
                               RESULT = v1;
                           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("physical_style",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // physical_style ::= SUP ESUP 
            {
              Vector RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                               Node nf = new Node(f, null);
                               Node ne = new Node(e, null);
                               Vector v1 = new Vector();
                               v1.addElement(nf);
                               v1.addElement(ne);
                               RESULT = v1;
                           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("physical_style",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // physical_style ::= SUB text ESUB 
            {
              Vector RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector bc = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                               Node nf = new Node(f, bc);
                               Node ne = new Node(e, null);
                               Vector v1 = new Vector();
                               v1.addElement(nf);
                               v1.addElement(ne);
                               RESULT = v1;
                           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("physical_style",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // physical_style ::= SUB ESUB 
            {
              Vector RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                               Node nf = new Node(f, null);
                               Node ne = new Node(e, null);
                               Vector v1 = new Vector();
                               v1.addElement(nf);
                               v1.addElement(ne);
                               RESULT = v1;
                           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("physical_style",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // physical_style ::= FONT TEXT EFONT 
            {
              Vector RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
                               Node nt = new Node(t, null);
                               Vector v = new Vector();
                               v.addElement(nt); 
                               Node nf = new Node(f, v);
                               Node ne = new Node(e, null);
                               Vector v1 = new Vector();
                               v1.addElement(nf);
                               v1.addElement(ne);
                               RESULT = v1;
                           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("physical_style",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // physical_style ::= FONT EFONT 
            {
              Vector RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
                               Node nf = new Node(f, null);
                               Node ne = new Node(e, null);
                               Vector v1 = new Vector();
                               v1.addElement(nf);
                               v1.addElement(ne);
                               RESULT = v1;
                           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("physical_style",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // p_tag ::= P TEXT EP 
            {
              Vector RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
                               Node nt = new Node(t, null);
                               Vector v = new Vector();
                               v.addElement(nt); 
                               Node nf = new Node(f, v);
                               Node ne = new Node(e, null);
                               Vector v1 = new Vector();
                               v1.addElement(nf);
                               v1.addElement(ne);
                               RESULT = v1;
                           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("p_tag",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // p_tag ::= P EP 
            {
              Vector RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
                               Node nf = new Node(f, null);
                               Node ne = new Node(e, null);
                               Vector v1 = new Vector();
                               v1.addElement(nf);
                               v1.addElement(ne);
                               RESULT = v1;
                           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("p_tag",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // table_tag ::= TABLE table_contents ETABLE 
            {
              Vector RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector bc = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                               Node nf = new Node(f, bc);
                               Node ne = new Node(e, null);
                               Vector v1 = new Vector();
                               v1.addElement(nf);
                               v1.addElement(ne);
                               RESULT = v1;
                           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("table_tag",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // table_tag ::= TABLE ETABLE 
            {
              Vector RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                               Node nf = new Node(f, null);
                               Node ne = new Node(e, null);
                               Vector v1 = new Vector();
                               v1.addElement(nf);
                               v1.addElement(ne);
                               RESULT = v1;
                           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("table_tag",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // table_contents ::= table_contents table_content 
            {
              Vector RESULT =null;
		int fsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector fs = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Vector f = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                            Enumeration e = f.elements();
		            while (e.hasMoreElements()) 
	      	              fs.addElement((Node) e.nextElement()); 
                            RESULT = fs;   
                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("table_contents",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // table_contents ::= table_content 
            {
              Vector RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Vector f = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                             RESULT = f;   
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("table_contents",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // table_content ::= TBODY 
            {
              Vector RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                               Node nt = new Node(t, null);
                               Vector v1 = new Vector();
                               v1.addElement(nt);
                               RESULT = v1; 
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("table_content",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // table_content ::= THEAD 
            {
              Vector RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                               Node nt = new Node(t, null);
                               Vector v1 = new Vector();
                               v1.addElement(nt);
                               RESULT = v1; 
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("table_content",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // table_content ::= tr_tag 
            {
              Vector RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Vector t = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                 RESULT = t;
                             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("table_content",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // tr_tag ::= TR table_cells ETR 
            {
              Vector RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector bc = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                               Node nf = new Node(f, bc);
                               Node ne = new Node(e, null);
                               Vector v1 = new Vector();
                               v1.addElement(nf);
                               v1.addElement(ne);
                               RESULT = v1;
                           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tr_tag",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // tr_tag ::= TR ETR 
            {
              Vector RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                               Node nf = new Node(f, null);
                               Node ne = new Node(e, null);
                               Vector v1 = new Vector();
                               v1.addElement(nf);
                               v1.addElement(ne);
                               RESULT = v1;
                           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tr_tag",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // table_cells ::= table_cells table_cell 
            {
              Vector RESULT =null;
		int fsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector fs = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Vector f = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                            Enumeration e = f.elements();
		            while (e.hasMoreElements()) 
	      	              fs.addElement((Node) e.nextElement()); 
                            RESULT = fs;   
                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("table_cells",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // table_cells ::= table_cell 
            {
              Vector RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Vector f = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                             RESULT = f;   
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("table_cells",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // table_cell ::= TD body_content ETD 
            {
              Vector RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector bc = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                               Node nf = new Node(f, bc);
                               Node ne = new Node(e, null);
                               Vector v1 = new Vector();
                               v1.addElement(nf);
                               v1.addElement(ne);
                               RESULT = v1;
                           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("table_cell",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // table_cell ::= TH body_content ETH 
            {
              Vector RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector bc = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                               Node nf = new Node(f, bc);
                               Node ne = new Node(e, null);
                               Vector v1 = new Vector();
                               v1.addElement(nf);
                               v1.addElement(ne);
                               RESULT = v1;
                           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("table_cell",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
