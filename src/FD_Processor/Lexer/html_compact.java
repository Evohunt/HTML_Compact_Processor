/* The following code was generated by JFlex 1.7.0 */

import java_cup.runtime.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>html_compact.flex</tt>
 */
class html_compact implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\6\1\2\1\11\1\3\1\1\22\0\1\6\1\0\1\10"+
    "\14\0\1\20\1\5\1\42\1\43\1\44\1\45\1\46\1\47\3\5"+
    "\2\0\1\13\1\7\1\12\2\0\32\4\4\0\1\5\1\0\1\32"+
    "\1\21\1\36\1\23\1\33\1\40\1\41\1\14\1\27\1\35\1\4"+
    "\1\17\1\16\1\26\1\22\1\34\1\4\1\30\1\37\1\15\1\25"+
    "\1\31\2\4\1\24\1\4\12\0\1\11\u1fa2\0\1\11\1\11\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\1\3\2\2\3\1\1\63\0\1\4\7\0\1\5"+
    "\2\0\1\6\3\0\1\7\1\10\12\0\1\11\1\0"+
    "\1\12\1\0\1\13\1\0\1\14\1\0\1\15\1\0"+
    "\1\16\1\0\1\17\1\0\1\20\3\0\1\21\1\0"+
    "\1\22\3\0\1\23\21\0\1\24\6\0\1\25\2\0"+
    "\1\26\1\0\1\27\1\30\13\0\1\31\1\0\1\32"+
    "\5\0\1\33\35\0\1\34\3\0\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\0\1\45\3\0"+
    "\1\46\3\0\1\47\4\0\1\50\23\0\1\51\1\0"+
    "\1\52\3\0\1\53\6\0\1\54\1\55\5\0\1\56"+
    "\31\0\1\57\4\0\1\60\6\0\1\61\1\62\1\0"+
    "\1\63\1\64\2\0\1\65\1\66\7\0\1\67\22\0"+
    "\1\70\1\0\1\71\1\0\1\72\11\0\1\73\1\74"+
    "\3\0\1\75\4\0\1\76\1\77\2\0\1\100\1\0"+
    "\1\101\7\0\1\102\1\0\1\103\1\104\17\0\1\105"+
    "\2\0\1\106\1\0\1\107\5\0\1\110\20\0\1\111"+
    "\1\112\1\113\5\0\1\114\6\0\1\115\2\0\1\116"+
    "\1\0\1\117\10\0\1\7\1\0\1\120\1\0\1\121"+
    "\12\0\1\11\2\0\1\12\2\0\1\13\2\0\1\14"+
    "\2\0\1\15\2\0\1\16\2\0\1\17\2\0\1\20"+
    "\2\0\1\21\2\0\1\22\6\0\1\122\1\123\1\124"+
    "\1\0\1\125\1\126\1\127\5\0\1\32\6\0\1\33"+
    "\20\0\1\34\15\0\1\51\2\0\1\52\1\130\2\0"+
    "\1\53\11\0\1\131\3\0\1\57\1\0\1\132\1\133"+
    "\2\0\1\67\10\0\1\70\2\0\1\71\2\0\1\72"+
    "\4\0\1\75\2\0\1\76\5\0\1\105\2\0\1\106"+
    "\3\0\1\110\4\0\1\115\2\0\1\116\2\0\1\117"+
    "\2\0\1\121\4\0\1\131";

  private static int [] zzUnpackAction() {
    int [] result = new int[626];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\50\0\120\0\170\0\240\0\310\0\360\0\240"+
    "\0\360\0\170\0\u0118\0\u0140\0\u0168\0\u0190\0\u01b8\0\u01e0"+
    "\0\u0208\0\u0230\0\u0258\0\u0280\0\u02a8\0\u02d0\0\u02f8\0\u0320"+
    "\0\u0348\0\u0370\0\u0398\0\u03c0\0\u03e8\0\u0410\0\u0438\0\u0460"+
    "\0\u0488\0\u04b0\0\u04d8\0\u0500\0\u0528\0\u0550\0\u0578\0\u05a0"+
    "\0\u05c8\0\u05f0\0\u0618\0\u0640\0\u0668\0\u0690\0\u06b8\0\u06e0"+
    "\0\u0708\0\u0730\0\u0758\0\u0780\0\u07a8\0\u07d0\0\u07f8\0\u0820"+
    "\0\u0848\0\u0870\0\u0898\0\310\0\u08c0\0\u08e8\0\u0910\0\u0938"+
    "\0\u0960\0\u0988\0\u09b0\0\310\0\u09d8\0\u0a00\0\310\0\u0a28"+
    "\0\u0a50\0\u0a78\0\310\0\310\0\u0aa0\0\u0ac8\0\u0af0\0\u0b18"+
    "\0\u0b40\0\u0b68\0\u0b90\0\u0bb8\0\u0be0\0\u0c08\0\310\0\u0c30"+
    "\0\310\0\u0c58\0\310\0\u0c80\0\310\0\u0ca8\0\310\0\u0cd0"+
    "\0\310\0\u0cf8\0\310\0\u0d20\0\310\0\u0d48\0\u0d70\0\u0d98"+
    "\0\310\0\u0dc0\0\310\0\u0de8\0\u0e10\0\u0e38\0\310\0\u0e60"+
    "\0\u0e88\0\u0eb0\0\u0ed8\0\u0f00\0\u0f28\0\u0f50\0\u0f78\0\u0fa0"+
    "\0\u0fc8\0\u0ff0\0\u1018\0\u1040\0\u1068\0\u1090\0\u10b8\0\u10e0"+
    "\0\310\0\u1108\0\u1130\0\u1158\0\u1180\0\u11a8\0\u11d0\0\310"+
    "\0\u11f8\0\u1220\0\310\0\u1248\0\310\0\310\0\u1270\0\u1298"+
    "\0\u12c0\0\u12e8\0\u1310\0\u1338\0\u1360\0\u1388\0\u13b0\0\u13d8"+
    "\0\u1400\0\310\0\u1428\0\310\0\u1450\0\u1478\0\u14a0\0\u14c8"+
    "\0\u14f0\0\310\0\u1518\0\u1540\0\u1568\0\u1590\0\u15b8\0\u15e0"+
    "\0\u1608\0\u1630\0\u1658\0\u1680\0\u16a8\0\u16d0\0\u16f8\0\u1720"+
    "\0\u1748\0\u1770\0\u1798\0\u17c0\0\u17e8\0\u1810\0\u1838\0\u1860"+
    "\0\u1888\0\u18b0\0\u18d8\0\u1900\0\u1928\0\u1950\0\u1978\0\310"+
    "\0\u19a0\0\u19c8\0\u19f0\0\310\0\310\0\310\0\310\0\310"+
    "\0\310\0\310\0\310\0\u1a18\0\310\0\u1a40\0\u1a68\0\u1a90"+
    "\0\310\0\u1ab8\0\u1ae0\0\u1b08\0\310\0\u1b30\0\u1b58\0\u1b80"+
    "\0\u1ba8\0\310\0\u1bd0\0\u1bf8\0\u1c20\0\u1c48\0\u1c70\0\u1c98"+
    "\0\u1cc0\0\u1ce8\0\u1d10\0\u1d38\0\u1d60\0\u1d88\0\u1db0\0\u1dd8"+
    "\0\u1e00\0\u1e28\0\u1e50\0\u1e78\0\u1ea0\0\310\0\u1ec8\0\310"+
    "\0\u1ef0\0\u1f18\0\u1f40\0\310\0\u1f68\0\u1f90\0\u1fb8\0\u1fe0"+
    "\0\u2008\0\u2030\0\310\0\310\0\u2058\0\u2080\0\u20a8\0\u20d0"+
    "\0\u20f8\0\310\0\u2120\0\u2148\0\u2170\0\u2198\0\u21c0\0\u21e8"+
    "\0\u2210\0\u2238\0\u2260\0\u2288\0\u22b0\0\u22d8\0\u2300\0\u2328"+
    "\0\u2350\0\u2378\0\u23a0\0\u23c8\0\u23f0\0\u2418\0\u2440\0\u2468"+
    "\0\u2490\0\u24b8\0\u24e0\0\310\0\u2508\0\u2530\0\u2558\0\u2580"+
    "\0\310\0\u25a8\0\u25d0\0\u25f8\0\u2620\0\u2648\0\u2670\0\310"+
    "\0\310\0\u2698\0\310\0\310\0\u26c0\0\u26e8\0\310\0\310"+
    "\0\u2710\0\u2738\0\u2760\0\u2788\0\u27b0\0\u27d8\0\u2800\0\310"+
    "\0\u2828\0\u2850\0\u2878\0\u28a0\0\u28c8\0\u28f0\0\u2918\0\u2940"+
    "\0\u2968\0\u2990\0\u29b8\0\u29e0\0\u2a08\0\u2a30\0\u2a58\0\u2a80"+
    "\0\u2aa8\0\u2ad0\0\310\0\u2af8\0\310\0\u2b20\0\310\0\u2b48"+
    "\0\u2b70\0\u2b98\0\u2bc0\0\u2be8\0\u2c10\0\u2c38\0\u2c60\0\u2c88"+
    "\0\310\0\310\0\u2cb0\0\u2cd8\0\u2d00\0\310\0\u2d28\0\u2d50"+
    "\0\u2d78\0\u2da0\0\310\0\310\0\u2dc8\0\u2df0\0\310\0\u2e18"+
    "\0\310\0\u2e40\0\u2e68\0\u2e90\0\u2eb8\0\u2ee0\0\u2f08\0\u2f30"+
    "\0\310\0\u2f58\0\310\0\310\0\u2f80\0\u2fa8\0\u2fd0\0\u2ff8"+
    "\0\u3020\0\u3048\0\u3070\0\u3098\0\u30c0\0\u30e8\0\u3110\0\u3138"+
    "\0\u3160\0\u3188\0\u31b0\0\310\0\u31d8\0\u3200\0\310\0\u3228"+
    "\0\310\0\u3250\0\u3278\0\u32a0\0\u32c8\0\u32f0\0\310\0\u3318"+
    "\0\u3340\0\u3368\0\u3390\0\u33b8\0\u33e0\0\u3408\0\u3430\0\u3458"+
    "\0\u3480\0\u34a8\0\u34d0\0\u34f8\0\u3520\0\u3548\0\u3570\0\310"+
    "\0\310\0\310\0\u3598\0\u35c0\0\u35e8\0\u3610\0\u3638\0\310"+
    "\0\u3660\0\u3688\0\u36b0\0\u36d8\0\u3700\0\u3728\0\310\0\u3750"+
    "\0\u3778\0\310\0\u37a0\0\310\0\u37c8\0\u37f0\0\u3818\0\u3840"+
    "\0\u3868\0\u3890\0\u38b8\0\u38e0\0\u2a08\0\u3908\0\310\0\u3930"+
    "\0\310\0\u3958\0\u3980\0\u39a8\0\u39d0\0\u39f8\0\u3a20\0\u3a48"+
    "\0\u3a70\0\u3a98\0\u3ac0\0\u2b70\0\u3ae8\0\u3b10\0\u2b98\0\u3b38"+
    "\0\u3b60\0\u2bc0\0\u3b88\0\u3bb0\0\u2be8\0\u3bd8\0\u3c00\0\u2c10"+
    "\0\u3c28\0\u3c50\0\u2c38\0\u3c78\0\u3ca0\0\u2c60\0\u3cc8\0\u3cf0"+
    "\0\u2c88\0\u3d18\0\u3d40\0\u2cb0\0\u3d68\0\u3d90\0\u2cd8\0\u3db8"+
    "\0\u3de0\0\u3e08\0\u3e30\0\u3e58\0\u3e80\0\310\0\310\0\310"+
    "\0\u3ea8\0\310\0\310\0\310\0\u3ed0\0\u3ef8\0\u3f20\0\u3f48"+
    "\0\u3f70\0\u2ff8\0\u3f98\0\u3fc0\0\u3fe8\0\u4010\0\u4038\0\u4060"+
    "\0\u3110\0\u4088\0\u40b0\0\u40d8\0\u4100\0\u4128\0\u4150\0\u4178"+
    "\0\u41a0\0\u41c8\0\u41f0\0\u4218\0\u4240\0\u4268\0\u4290\0\u42b8"+
    "\0\u42e0\0\u34f8\0\u4308\0\u4330\0\u4358\0\u4380\0\u43a8\0\u43d0"+
    "\0\u43f8\0\u4420\0\u4448\0\u4470\0\u4498\0\u44c0\0\u44e8\0\u37c8"+
    "\0\u4510\0\u4538\0\u37f0\0\310\0\u4560\0\u4588\0\u3868\0\u45b0"+
    "\0\u45d8\0\u4600\0\u4628\0\u4650\0\u4678\0\u46a0\0\u46c8\0\u46f0"+
    "\0\310\0\u4718\0\u4740\0\u4768\0\u3e30\0\u4790\0\310\0\310"+
    "\0\u47b8\0\u47e0\0\u3ef8\0\u4808\0\u4830\0\u4858\0\u4880\0\u48a8"+
    "\0\u48d0\0\u48f8\0\u4920\0\u41a0\0\u4948\0\u4970\0\u41c8\0\u4998"+
    "\0\u49c0\0\u41f0\0\u49e8\0\u4a10\0\u4a38\0\u4a60\0\u4290\0\u4a88"+
    "\0\u4ab0\0\u4330\0\u4ad8\0\u4b00\0\u4b28\0\u4b50\0\u4b78\0\u45b0"+
    "\0\u4ba0\0\u4bc8\0\u45d8\0\u4bf0\0\u4c18\0\u4c40\0\u46c8\0\u4c68"+
    "\0\u4c90\0\u4cb8\0\u4ce0\0\u4808\0\u4d08\0\u4d30\0\u4830\0\u4d58"+
    "\0\u4d80\0\u4858\0\u4da8\0\u4dd0\0\u48d0\0\u4df8\0\u4e20\0\u4e48"+
    "\0\u4e70\0\u4df8";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[626];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\2\2\1\5\3\2\1\6"+
    "\1\7\36\2\1\0\7\2\2\0\35\2\1\10\1\4"+
    "\1\10\2\2\1\10\3\2\1\0\1\11\34\2\1\0"+
    "\3\12\2\0\1\12\4\0\1\11\34\0\1\2\1\10"+
    "\1\12\1\10\2\2\1\10\3\2\1\0\1\11\34\2"+
    "\64\0\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\0\1\23\1\24\1\25\2\0\1\26\1\0"+
    "\1\27\1\0\1\30\1\31\1\32\24\0\1\33\12\0"+
    "\1\34\11\0\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\14\0\1\43\4\0\1\44\1\0\1\45\4\0\1\46"+
    "\1\0\1\47\47\0\1\50\1\51\43\0\1\52\2\0"+
    "\1\53\31\0\1\54\1\55\1\56\1\57\1\0\1\60"+
    "\1\61\1\62\1\0\1\63\1\64\1\65\1\0\1\66"+
    "\1\67\1\0\1\70\1\0\1\71\1\72\1\73\21\0"+
    "\1\74\7\0\1\75\2\0\1\76\2\0\1\77\36\0"+
    "\1\100\1\0\1\101\12\0\1\102\42\0\1\103\32\0"+
    "\1\104\4\0\1\105\52\0\1\106\37\0\1\107\3\0"+
    "\1\110\7\0\1\111\24\0\1\112\2\0\1\112\3\0"+
    "\1\113\47\0\1\114\17\0\1\115\50\0\1\116\32\0"+
    "\1\117\6\0\1\120\5\0\1\121\1\122\35\0\1\123"+
    "\5\0\1\124\35\0\1\125\34\0\1\126\2\0\1\126"+
    "\3\0\1\127\40\0\1\130\2\0\1\130\3\0\1\131"+
    "\40\0\1\132\2\0\1\132\3\0\1\133\40\0\1\134"+
    "\2\0\1\134\3\0\1\135\40\0\1\136\2\0\1\136"+
    "\3\0\1\137\40\0\1\140\2\0\1\140\3\0\1\141"+
    "\40\0\1\142\2\0\1\142\3\0\1\143\40\0\1\144"+
    "\2\0\1\144\3\0\1\145\20\0\1\146\36\0\1\147"+
    "\30\0\1\150\2\0\1\150\3\0\1\151\40\0\1\152"+
    "\2\0\1\152\3\0\1\153\56\0\1\154\62\0\1\155"+
    "\41\0\1\156\33\0\1\157\56\0\1\160\43\0\1\161"+
    "\24\0\1\162\1\163\1\164\1\165\1\166\1\167\14\0"+
    "\1\170\6\0\1\171\3\0\1\172\1\173\1\0\1\174"+
    "\47\0\1\175\1\176\43\0\1\177\2\0\1\200\27\0"+
    "\1\201\7\0\1\202\2\0\1\203\41\0\1\204\1\0"+
    "\1\205\12\0\1\206\42\0\1\207\32\0\1\210\4\0"+
    "\1\211\52\0\1\212\37\0\1\213\67\0\1\214\27\0"+
    "\1\215\47\0\1\216\15\0\1\217\52\0\1\220\32\0"+
    "\1\221\6\0\1\222\5\0\1\223\1\224\1\0\1\225"+
    "\33\0\1\226\5\0\1\227\42\0\1\230\41\0\1\231"+
    "\44\0\1\232\40\0\1\233\2\0\1\233\3\0\1\234"+
    "\72\0\1\235\27\0\1\236\62\0\1\237\1\240\21\0"+
    "\1\241\2\0\1\241\3\0\1\242\75\0\1\243\50\0"+
    "\1\244\42\0\1\245\16\0\1\112\1\246\1\0\1\112"+
    "\5\0\4\246\1\0\21\246\36\0\1\247\45\0\1\250"+
    "\53\0\1\251\36\0\1\252\12\0\1\253\32\0\1\254"+
    "\62\0\1\255\43\0\1\256\1\0\1\257\51\0\1\260"+
    "\34\0\1\261\33\0\1\126\1\262\1\0\1\126\5\0"+
    "\4\262\1\0\21\262\11\0\1\130\1\263\1\0\1\130"+
    "\5\0\4\263\1\0\21\263\11\0\1\132\1\264\1\0"+
    "\1\132\5\0\4\264\1\0\21\264\11\0\1\134\1\265"+
    "\1\0\1\134\5\0\4\265\1\0\21\265\11\0\1\136"+
    "\1\266\1\0\1\136\5\0\4\266\1\0\21\266\11\0"+
    "\1\140\1\267\1\0\1\140\5\0\4\267\1\0\21\267"+
    "\11\0\1\142\1\270\1\0\1\142\5\0\4\270\1\0"+
    "\21\270\11\0\1\144\1\271\1\0\1\144\5\0\4\271"+
    "\1\0\21\271\40\0\1\272\40\0\1\273\27\0\1\150"+
    "\1\274\1\0\1\150\5\0\4\274\1\0\21\274\11\0"+
    "\1\152\1\275\1\0\1\152\5\0\4\275\1\0\21\275"+
    "\25\0\1\276\33\0\1\277\2\0\1\277\3\0\1\300"+
    "\62\0\1\301\55\0\1\302\32\0\1\303\43\0\1\304"+
    "\47\0\1\305\47\0\1\306\47\0\1\307\47\0\1\310"+
    "\47\0\1\311\47\0\1\312\47\0\1\313\52\0\1\314"+
    "\44\0\1\315\56\0\1\316\62\0\1\317\41\0\1\320"+
    "\33\0\1\321\56\0\1\322\51\0\1\323\41\0\1\324"+
    "\44\0\1\325\72\0\1\326\27\0\1\327\62\0\1\330"+
    "\1\331\30\0\1\332\75\0\1\333\37\0\1\334\52\0"+
    "\1\335\42\0\1\336\53\0\1\337\36\0\1\340\12\0"+
    "\1\341\32\0\1\342\62\0\1\343\45\0\1\344\45\0"+
    "\1\345\1\0\1\346\51\0\1\347\41\0\1\350\40\0"+
    "\1\351\35\0\1\233\1\352\1\0\1\233\5\0\4\352"+
    "\1\0\21\352\41\0\1\353\43\0\1\354\23\0\1\355"+
    "\2\0\1\355\3\0\1\356\40\0\1\357\2\0\1\357"+
    "\3\0\1\360\40\0\1\241\1\361\1\0\1\241\5\0"+
    "\4\361\1\0\21\361\36\0\1\362\22\0\1\363\2\0"+
    "\1\363\3\0\1\364\62\0\1\365\26\0\2\246\1\366"+
    "\1\367\4\0\4\246\1\0\27\246\32\0\1\370\32\0"+
    "\1\371\51\0\1\372\42\0\1\373\47\0\1\374\70\0"+
    "\1\375\42\0\1\376\36\0\1\377\50\0\1\u0100\47\0"+
    "\1\u0101\43\0\1\u0102\41\0\2\262\1\u0103\1\u0104\4\0"+
    "\4\262\1\0\27\262\4\0\2\263\1\u0105\1\u0106\4\0"+
    "\4\263\1\0\27\263\4\0\2\264\1\u0107\1\u0108\4\0"+
    "\4\264\1\0\27\264\4\0\2\265\1\u0109\1\u010a\4\0"+
    "\4\265\1\0\27\265\4\0\2\266\1\u010b\1\u010c\4\0"+
    "\4\266\1\0\27\266\4\0\2\267\1\u010d\1\u010e\4\0"+
    "\4\267\1\0\27\267\4\0\2\270\1\u010f\1\u0110\4\0"+
    "\4\270\1\0\27\270\4\0\2\271\1\u0111\1\u0112\4\0"+
    "\4\271\1\0\27\271\23\0\1\u0113\50\0\1\u0114\27\0"+
    "\2\274\1\u0115\1\u0116\4\0\4\274\1\0\27\274\4\0"+
    "\2\275\1\u0117\1\u0118\4\0\4\275\1\0\27\275\33\0"+
    "\1\u0119\17\0\1\277\1\u011a\1\0\1\277\5\0\4\u011a"+
    "\1\0\21\u011a\11\0\1\u011b\2\0\1\u011b\3\0\1\u011c"+
    "\54\0\1\u011d\47\0\1\u011e\47\0\1\u011f\47\0\1\u0120"+
    "\42\0\1\u0121\62\0\1\u0122\55\0\1\u0123\40\0\1\u0124"+
    "\40\0\1\u0125\65\0\1\u0126\43\0\1\u0127\32\0\1\u0128"+
    "\47\0\1\u0129\65\0\1\u012a\31\0\1\u012b\47\0\1\u012c"+
    "\52\0\1\u012d\51\0\1\u012e\42\0\1\u012f\47\0\1\u0130"+
    "\70\0\1\u0131\42\0\1\u0132\50\0\1\u0133\35\0\1\u0134"+
    "\50\0\1\u0135\47\0\1\u0136\34\0\1\u0137\2\0\1\u0137"+
    "\3\0\1\u0138\57\0\1\u0139\31\0\2\352\1\u013a\1\u013b"+
    "\4\0\4\352\1\0\27\352\36\0\1\u013c\33\0\1\u013d"+
    "\30\0\1\355\1\u013e\1\0\1\355\5\0\4\u013e\1\0"+
    "\21\u013e\11\0\1\357\1\u013f\1\0\1\357\5\0\4\u013f"+
    "\1\0\21\u013f\12\0\2\361\1\u0140\1\u0141\4\0\4\361"+
    "\1\0\27\361\32\0\1\u0142\20\0\1\363\1\u0143\1\0"+
    "\1\363\5\0\4\u0143\1\0\21\u0143\23\0\1\u0144\40\0"+
    "\1\366\1\367\46\0\1\367\1\0\1\u0145\55\0\1\u0146"+
    "\64\0\1\u0147\33\0\1\u0148\66\0\1\u0149\14\0\1\u014a"+
    "\2\0\1\u014a\3\0\1\u014b\40\0\1\u014c\2\0\1\u014c"+
    "\3\0\1\u014d\40\0\1\u014e\2\0\1\u014e\3\0\1\u014f"+
    "\70\0\1\u0150\22\0\1\u0103\1\u0104\46\0\1\u0104\1\0"+
    "\1\u0151\45\0\1\u0105\1\u0106\46\0\1\u0106\1\0\1\u0152"+
    "\45\0\1\u0107\1\u0108\46\0\1\u0108\1\0\1\u0153\45\0"+
    "\1\u0109\1\u010a\46\0\1\u010a\1\0\1\u0154\45\0\1\u010b"+
    "\1\u010c\46\0\1\u010c\1\0\1\u0155\45\0\1\u010d\1\u010e"+
    "\46\0\1\u010e\1\0\1\u0156\45\0\1\u010f\1\u0110\46\0"+
    "\1\u0110\1\0\1\u0157\45\0\1\u0111\1\u0112\46\0\1\u0112"+
    "\1\0\1\u0158\51\0\1\u0159\47\0\1\u015a\43\0\1\u0115"+
    "\1\u0116\46\0\1\u0116\1\0\1\u015b\45\0\1\u0117\1\u0118"+
    "\46\0\1\u0118\1\0\1\u015c\42\0\1\u015d\2\0\1\u015d"+
    "\3\0\1\u015e\41\0\2\u011a\1\u015f\1\u0160\4\0\4\u011a"+
    "\1\0\27\u011a\3\0\1\u011b\1\u0161\1\0\1\u011b\5\0"+
    "\4\u0161\1\0\21\u0161\11\0\1\u0162\2\0\1\u0162\3\0"+
    "\1\u0163\47\0\1\u0164\70\0\1\u0165\47\0\1\u0166\26\0"+
    "\1\u0167\54\0\1\u0168\42\0\1\u0169\57\0\1\u016a\63\0"+
    "\1\u016b\33\0\1\u016c\57\0\1\u016d\50\0\1\u016e\33\0"+
    "\1\u016f\66\0\1\u0170\23\0\1\u0171\71\0\1\u0172\25\0"+
    "\1\u0173\47\0\1\u0174\70\0\1\u0175\17\0\1\u0137\1\u0176"+
    "\1\0\1\u0137\5\0\4\u0176\1\0\21\u0176\34\0\1\u0177"+
    "\27\0\1\u013a\1\u013b\46\0\1\u013b\1\0\1\u0178\54\0"+
    "\1\u0179\60\0\1\u017a\25\0\2\u013e\1\u017b\1\u017c\4\0"+
    "\4\u013e\1\0\27\u013e\4\0\2\u013f\1\u017d\1\u017e\4\0"+
    "\4\u013f\1\0\27\u013f\6\0\1\u0140\1\u0141\46\0\1\u0141"+
    "\1\0\1\u017f\55\0\1\u0180\35\0\2\u0143\1\u0181\1\u0182"+
    "\4\0\4\u0143\1\0\27\u0143\3\0\1\u0183\2\0\1\u0183"+
    "\3\0\1\u0184\35\0\1\u0145\3\0\4\u0145\1\u0185\1\0"+
    "\36\u0145\3\0\1\u0186\2\0\1\u0186\3\0\1\u0187\65\0"+
    "\1\u0188\31\0\1\u0189\52\0\1\u018a\35\0\1\u014a\1\u018b"+
    "\1\0\1\u014a\5\0\4\u018b\1\0\21\u018b\11\0\1\u014c"+
    "\1\u018c\1\0\1\u014c\5\0\4\u018c\1\0\21\u018c\11\0"+
    "\1\u014e\1\u018d\1\0\1\u014e\5\0\4\u018d\1\0\21\u018d"+
    "\11\0\1\u018e\2\0\1\u018e\3\0\1\u018f\24\0\1\u0190"+
    "\10\0\1\u0151\3\0\4\u0151\1\u0191\1\0\36\u0151\1\u0152"+
    "\3\0\4\u0152\1\u0192\1\0\36\u0152\1\u0153\3\0\4\u0153"+
    "\1\u0193\1\0\36\u0153\1\u0154\3\0\4\u0154\1\u0194\1\0"+
    "\36\u0154\1\u0155\3\0\4\u0155\1\u0195\1\0\36\u0155\1\u0156"+
    "\3\0\4\u0156\1\u0196\1\0\36\u0156\1\u0157\3\0\4\u0157"+
    "\1\u0197\1\0\36\u0157\1\u0158\3\0\4\u0158\1\u0198\1\0"+
    "\36\u0158\1\u015b\3\0\4\u015b\1\u0199\1\0\36\u015b\1\u015c"+
    "\3\0\4\u015c\1\u019a\1\0\36\u015c\3\0\1\u015d\1\u019b"+
    "\1\0\1\u015d\5\0\4\u019b\1\0\21\u019b\14\0\1\u015f"+
    "\1\u0160\46\0\1\u0160\1\0\1\u019c\43\0\2\u0161\1\u019d"+
    "\1\u019e\4\0\4\u0161\1\0\27\u0161\3\0\1\u0162\1\u019f"+
    "\1\0\1\u0162\5\0\4\u019f\1\0\21\u019f\20\0\1\u01a0"+
    "\47\0\1\u01a1\47\0\1\u01a2\63\0\1\u01a3\36\0\1\u01a4"+
    "\60\0\1\u01a5\37\0\1\u01a6\61\0\1\u01a7\31\0\1\u01a8"+
    "\52\0\1\u01a9\47\0\1\u01aa\71\0\1\u01ab\14\0\2\u0176"+
    "\1\u01ac\1\u01ad\4\0\4\u0176\1\0\27\u0176\3\0\1\u01ae"+
    "\2\0\1\u01ae\3\0\1\u01af\35\0\1\u0178\3\0\4\u0178"+
    "\1\u01b0\1\0\36\u0178\3\0\1\u01b1\2\0\1\u01b1\3\0"+
    "\1\u01b2\40\0\1\u01b3\2\0\1\u01b3\3\0\1\u01b4\43\0"+
    "\1\u017b\1\u017c\46\0\1\u017c\1\0\1\u01b5\45\0\1\u017d"+
    "\1\u017e\46\0\1\u017e\1\0\1\u01b6\37\0\1\u017f\3\0"+
    "\4\u017f\1\u01b7\1\0\36\u017f\33\0\1\u01b8\22\0\1\u0181"+
    "\1\u0182\46\0\1\u0182\1\0\1\u01b9\42\0\1\u0183\1\u01ba"+
    "\1\0\1\u0183\5\0\4\u01ba\1\0\21\u01ba\6\0\1\u0145"+
    "\2\u01bb\1\u01bc\2\u0145\1\u0185\1\u0145\1\u0185\1\0\1\u01bd"+
    "\35\u0145\3\0\1\u0186\1\u01be\1\0\1\u0186\5\0\4\u01be"+
    "\1\0\21\u01be\20\0\1\u01bf\40\0\1\u01c0\2\0\1\u01c0"+
    "\3\0\1\u01c1\41\0\2\u018b\1\u01c2\1\u01c3\4\0\4\u018b"+
    "\1\0\27\u018b\4\0\2\u018c\1\u01c4\1\u01c5\4\0\4\u018c"+
    "\1\0\27\u018c\4\0\2\u018d\1\u01c6\1\u01c7\4\0\4\u018d"+
    "\1\0\27\u018d\3\0\1\u018e\1\u01c8\1\0\1\u018e\5\0"+
    "\4\u01c8\1\0\21\u01c8\41\0\1\u01c9\14\0\1\u0151\2\u01ca"+
    "\1\u01cb\2\u0151\1\u0191\1\u0151\1\u0191\1\0\1\u01cc\35\u0151"+
    "\1\u0152\2\u01cd\1\u01ce\2\u0152\1\u0192\1\u0152\1\u0192\1\0"+
    "\1\u01cf\35\u0152\1\u0153\2\u01d0\1\u01d1\2\u0153\1\u0193\1\u0153"+
    "\1\u0193\1\0\1\u01d2\35\u0153\1\u0154\2\u01d3\1\u01d4\2\u0154"+
    "\1\u0194\1\u0154\1\u0194\1\0\1\u01d5\35\u0154\1\u0155\2\u01d6"+
    "\1\u01d7\2\u0155\1\u0195\1\u0155\1\u0195\1\0\1\u01d8\35\u0155"+
    "\1\u0156\2\u01d9\1\u01da\2\u0156\1\u0196\1\u0156\1\u0196\1\0"+
    "\1\u01db\35\u0156\1\u0157\2\u01dc\1\u01dd\2\u0157\1\u0197\1\u0157"+
    "\1\u0197\1\0\1\u01de\35\u0157\1\u0158\2\u01df\1\u01e0\2\u0158"+
    "\1\u0198\1\u0158\1\u0198\1\0\1\u01e1\35\u0158\1\u015b\2\u01e2"+
    "\1\u01e3\2\u015b\1\u0199\1\u015b\1\u0199\1\0\1\u01e4\35\u015b"+
    "\1\u015c\2\u01e5\1\u01e6\2\u015c\1\u019a\1\u015c\1\u019a\1\0"+
    "\1\u01e7\35\u015c\4\0\2\u019b\1\u01e8\1\u01e9\4\0\4\u019b"+
    "\1\0\27\u019b\1\u019c\3\0\4\u019c\1\u01ea\1\0\36\u019c"+
    "\6\0\1\u019d\1\u019e\46\0\1\u019e\1\0\1\u01eb\43\0"+
    "\2\u019f\1\u01ec\1\u01ed\4\0\4\u019f\1\0\27\u019f\12\0"+
    "\1\u01ee\47\0\1\u01ef\47\0\1\u01f0\70\0\1\u01f1\26\0"+
    "\1\u01f2\47\0\1\u01f3\47\0\1\u01f4\70\0\1\u01f5\22\0"+
    "\1\u01ac\1\u01ad\46\0\1\u01ad\1\0\1\u01f6\42\0\1\u01ae"+
    "\1\u01f7\1\0\1\u01ae\5\0\4\u01f7\1\0\21\u01f7\6\0"+
    "\1\u0178\2\u01f8\1\u01f9\2\u0178\1\u01b0\1\u0178\1\u01b0\1\0"+
    "\1\u01fa\35\u0178\3\0\1\u01b1\1\u01fb\1\0\1\u01b1\5\0"+
    "\4\u01fb\1\0\21\u01fb\11\0\1\u01b3\1\u01fc\1\0\1\u01b3"+
    "\5\0\4\u01fc\1\0\21\u01fc\6\0\1\u01b5\3\0\4\u01b5"+
    "\1\u01fd\1\0\36\u01b5\1\u01b6\3\0\4\u01b6\1\u01fe\1\0"+
    "\36\u01b6\1\u017f\2\u01ff\1\u0200\2\u017f\1\u01b7\1\u017f\1\u01b7"+
    "\1\0\1\u0201\35\u017f\37\0\1\u0202\10\0\1\u01b9\3\0"+
    "\4\u01b9\1\u0203\1\0\36\u01b9\4\0\2\u01ba\1\u0204\1\u0205"+
    "\4\0\4\u01ba\1\0\27\u01ba\1\0\2\u01bb\1\u01bc\2\0"+
    "\1\u01bc\3\0\1\113\36\0\2\u01bb\1\u01bc\1\246\1\0"+
    "\1\u01bc\3\0\1\113\1\0\4\246\1\0\21\246\12\0"+
    "\2\u01be\1\u0206\1\u0207\4\0\4\u01be\1\0\27\u01be\3\0"+
    "\1\u01c0\1\u0208\1\0\1\u01c0\5\0\4\u0208\1\0\21\u0208"+
    "\14\0\1\u01c2\1\u01c3\46\0\1\u01c3\1\0\1\u0209\45\0"+
    "\1\u01c4\1\u01c5\46\0\1\u01c5\1\0\1\u020a\45\0\1\u01c6"+
    "\1\u01c7\46\0\1\u01c7\1\0\1\u020b\43\0\2\u01c8\1\u020c"+
    "\1\u020d\4\0\4\u01c8\1\0\27\u01c8\15\0\1\u020e\33\0"+
    "\2\u01ca\1\u01cb\2\0\1\u01cb\3\0\1\127\36\0\2\u01ca"+
    "\1\u01cb\1\262\1\0\1\u01cb\3\0\1\127\1\0\4\262"+
    "\1\0\21\262\7\0\2\u01cd\1\u01ce\2\0\1\u01ce\3\0"+
    "\1\131\36\0\2\u01cd\1\u01ce\1\263\1\0\1\u01ce\3\0"+
    "\1\131\1\0\4\263\1\0\21\263\7\0\2\u01d0\1\u01d1"+
    "\2\0\1\u01d1\3\0\1\133\36\0\2\u01d0\1\u01d1\1\264"+
    "\1\0\1\u01d1\3\0\1\133\1\0\4\264\1\0\21\264"+
    "\7\0\2\u01d3\1\u01d4\2\0\1\u01d4\3\0\1\135\36\0"+
    "\2\u01d3\1\u01d4\1\265\1\0\1\u01d4\3\0\1\135\1\0"+
    "\4\265\1\0\21\265\7\0\2\u01d6\1\u01d7\2\0\1\u01d7"+
    "\3\0\1\137\36\0\2\u01d6\1\u01d7\1\266\1\0\1\u01d7"+
    "\3\0\1\137\1\0\4\266\1\0\21\266\7\0\2\u01d9"+
    "\1\u01da\2\0\1\u01da\3\0\1\141\36\0\2\u01d9\1\u01da"+
    "\1\267\1\0\1\u01da\3\0\1\141\1\0\4\267\1\0"+
    "\21\267\7\0\2\u01dc\1\u01dd\2\0\1\u01dd\3\0\1\143"+
    "\36\0\2\u01dc\1\u01dd\1\270\1\0\1\u01dd\3\0\1\143"+
    "\1\0\4\270\1\0\21\270\7\0\2\u01df\1\u01e0\2\0"+
    "\1\u01e0\3\0\1\145\36\0\2\u01df\1\u01e0\1\271\1\0"+
    "\1\u01e0\3\0\1\145\1\0\4\271\1\0\21\271\7\0"+
    "\2\u01e2\1\u01e3\2\0\1\u01e3\3\0\1\151\36\0\2\u01e2"+
    "\1\u01e3\1\274\1\0\1\u01e3\3\0\1\151\1\0\4\274"+
    "\1\0\21\274\7\0\2\u01e5\1\u01e6\2\0\1\u01e6\3\0"+
    "\1\153\36\0\2\u01e5\1\u01e6\1\275\1\0\1\u01e6\3\0"+
    "\1\153\1\0\4\275\1\0\21\275\14\0\1\u01e8\1\u01e9"+
    "\46\0\1\u01e9\1\0\1\u020f\37\0\1\u019c\2\u0210\1\u0211"+
    "\2\u019c\1\u01ea\1\u019c\1\u01ea\1\0\1\u0212\35\u019c\1\u01eb"+
    "\3\0\4\u01eb\1\u0213\1\0\36\u01eb\6\0\1\u01ec\1\u01ed"+
    "\46\0\1\u01ed\1\0\1\u0214\76\0\1\u0215\25\0\1\u0216"+
    "\32\0\1\u01f6\3\0\4\u01f6\1\u0217\1\0\36\u01f6\4\0"+
    "\2\u01f7\1\u0218\1\u0219\4\0\4\u01f7\1\0\27\u01f7\1\0"+
    "\2\u01f8\1\u01f9\2\0\1\u01f9\3\0\1\234\36\0\2\u01f8"+
    "\1\u01f9\1\352\1\0\1\u01f9\3\0\1\234\1\0\4\352"+
    "\1\0\21\352\12\0\2\u01fb\1\u021a\1\u021b\4\0\4\u01fb"+
    "\1\0\27\u01fb\4\0\2\u01fc\1\u021c\1\u021d\4\0\4\u01fc"+
    "\1\0\27\u01fc\1\u01b5\2\u021e\1\u021f\2\u01b5\1\u01fd\1\u01b5"+
    "\1\u01fd\1\0\1\u0220\35\u01b5\1\u01b6\2\u0221\1\u0222\2\u01b6"+
    "\1\u01fe\1\u01b6\1\u01fe\1\0\1\u0223\35\u01b6\1\0\2\u01ff"+
    "\1\u0200\2\0\1\u0200\3\0\1\242\36\0\2\u01ff\1\u0200"+
    "\1\361\1\0\1\u0200\3\0\1\242\1\0\4\361\1\0"+
    "\21\361\20\0\1\u0224\35\0\1\u01b9\2\u0225\1\u0226\2\u01b9"+
    "\1\u0203\1\u01b9\1\u0203\1\0\1\u0227\35\u01b9\6\0\1\u0204"+
    "\1\u0205\46\0\1\u0205\1\0\1\u0228\45\0\1\u0206\1\u0207"+
    "\46\0\1\u0207\1\0\1\u0229\43\0\2\u0208\1\u022a\1\u022b"+
    "\4\0\4\u0208\1\0\27\u0208\1\u0209\3\0\4\u0209\1\u022c"+
    "\1\0\36\u0209\1\u020a\3\0\4\u020a\1\u022d\1\0\36\u020a"+
    "\1\u020b\3\0\4\u020b\1\u022e\1\0\36\u020b\6\0\1\u020c"+
    "\1\u020d\46\0\1\u020d\1\0\1\u022f\42\0\1\u0230\2\0"+
    "\1\u0230\3\0\1\u0231\35\0\1\u020f\3\0\4\u020f\1\u0232"+
    "\1\0\36\u020f\1\0\2\u0210\1\u0211\2\0\1\u0211\3\0"+
    "\1\300\36\0\2\u0210\1\u0211\1\u011a\1\0\1\u0211\3\0"+
    "\1\300\1\0\4\u011a\1\0\21\u011a\6\0\1\u01eb\2\u0233"+
    "\1\u0234\2\u01eb\1\u0213\1\u01eb\1\u0213\1\0\1\u0235\35\u01eb"+
    "\1\u0214\3\0\4\u0214\1\u0236\1\0\36\u0214\12\0\1\u0237"+
    "\47\0\1\u0238\35\0\1\u01f6\2\u0239\1\u023a\2\u01f6\1\u0217"+
    "\1\u01f6\1\u0217\1\0\1\u023b\35\u01f6\6\0\1\u0218\1\u0219"+
    "\46\0\1\u0219\1\0\1\u023c\45\0\1\u021a\1\u021b\46\0"+
    "\1\u021b\1\0\1\u023d\45\0\1\u021c\1\u021d\46\0\1\u021d"+
    "\1\0\1\u023e\40\0\2\u021e\1\u021f\2\0\1\u021f\3\0"+
    "\1\356\36\0\2\u021e\1\u021f\1\u013e\1\0\1\u021f\3\0"+
    "\1\356\1\0\4\u013e\1\0\21\u013e\7\0\2\u0221\1\u0222"+
    "\2\0\1\u0222\3\0\1\360\36\0\2\u0221\1\u0222\1\u013f"+
    "\1\0\1\u0222\3\0\1\360\1\0\4\u013f\1\0\21\u013f"+
    "\7\0\2\u0225\1\u0226\2\0\1\u0226\3\0\1\364\36\0"+
    "\2\u0225\1\u0226\1\u0143\1\0\1\u0226\3\0\1\364\1\0"+
    "\4\u0143\1\0\21\u0143\6\0\1\u0228\3\0\4\u0228\1\u023f"+
    "\1\0\36\u0228\1\u0229\3\0\4\u0229\1\u0240\1\0\36\u0229"+
    "\6\0\1\u022a\1\u022b\46\0\1\u022b\1\0\1\u0241\37\0"+
    "\1\u0209\2\u0242\1\u0243\2\u0209\1\u022c\1\u0209\1\u022c\1\0"+
    "\1\u0244\35\u0209\1\u020a\2\u0245\1\u0246\2\u020a\1\u022d\1\u020a"+
    "\1\u022d\1\0\1\u0247\35\u020a\1\u020b\2\u0248\1\u0249\2\u020b"+
    "\1\u022e\1\u020b\1\u022e\1\0\1\u024a\35\u020b\1\u022f\3\0"+
    "\4\u022f\1\u024b\1\0\36\u022f\3\0\1\u0230\1\u024c\1\0"+
    "\1\u0230\5\0\4\u024c\1\0\21\u024c\6\0\1\u020f\2\u024d"+
    "\1\u024e\2\u020f\1\u0232\1\u020f\1\u0232\1\0\1\u024f\35\u020f"+
    "\1\0\2\u0233\1\u0234\2\0\1\u0234\3\0\1\u011c\36\0"+
    "\2\u0233\1\u0234\1\u0161\1\0\1\u0234\3\0\1\u011c\1\0"+
    "\4\u0161\1\0\21\u0161\6\0\1\u0214\2\u0250\1\u0251\2\u0214"+
    "\1\u0236\1\u0214\1\u0236\1\0\1\u0252\35\u0214\1\0\2\u0239"+
    "\1\u023a\2\0\1\u023a\3\0\1\u0138\36\0\2\u0239\1\u023a"+
    "\1\u0176\1\0\1\u023a\3\0\1\u0138\1\0\4\u0176\1\0"+
    "\21\u0176\6\0\1\u023c\3\0\4\u023c\1\u0253\1\0\36\u023c"+
    "\1\u023d\3\0\4\u023d\1\u0254\1\0\36\u023d\1\u023e\3\0"+
    "\4\u023e\1\u0255\1\0\36\u023e\1\u0228\2\u0256\1\u0257\2\u0228"+
    "\1\u023f\1\u0228\1\u023f\1\0\1\u0258\35\u0228\1\u0229\2\u0259"+
    "\1\u025a\2\u0229\1\u0240\1\u0229\1\u0240\1\0\1\u025b\35\u0229"+
    "\1\u0241\3\0\4\u0241\1\u025c\1\0\36\u0241\1\0\2\u0242"+
    "\1\u0243\2\0\1\u0243\3\0\1\u014b\36\0\2\u0242\1\u0243"+
    "\1\u018b\1\0\1\u0243\3\0\1\u014b\1\0\4\u018b\1\0"+
    "\21\u018b\7\0\2\u0245\1\u0246\2\0\1\u0246\3\0\1\u014d"+
    "\36\0\2\u0245\1\u0246\1\u018c\1\0\1\u0246\3\0\1\u014d"+
    "\1\0\4\u018c\1\0\21\u018c\7\0\2\u0248\1\u0249\2\0"+
    "\1\u0249\3\0\1\u014f\36\0\2\u0248\1\u0249\1\u018d\1\0"+
    "\1\u0249\3\0\1\u014f\1\0\4\u018d\1\0\21\u018d\6\0"+
    "\1\u022f\2\u025d\1\u025e\2\u022f\1\u024b\1\u022f\1\u024b\1\0"+
    "\1\u025f\35\u022f\4\0\2\u024c\1\u0260\1\u0261\4\0\4\u024c"+
    "\1\0\27\u024c\1\0\2\u024d\1\u024e\2\0\1\u024e\3\0"+
    "\1\u015e\36\0\2\u024d\1\u024e\1\u019b\1\0\1\u024e\3\0"+
    "\1\u015e\1\0\4\u019b\1\0\21\u019b\7\0\2\u0250\1\u0251"+
    "\2\0\1\u0251\3\0\1\u0163\36\0\2\u0250\1\u0251\1\u019f"+
    "\1\0\1\u0251\3\0\1\u0163\1\0\4\u019f\1\0\21\u019f"+
    "\6\0\1\u023c\2\u0262\1\u0263\2\u023c\1\u0253\1\u023c\1\u0253"+
    "\1\0\1\u0264\35\u023c\1\u023d\2\u0265\1\u0266\2\u023d\1\u0254"+
    "\1\u023d\1\u0254\1\0\1\u0267\35\u023d\1\u023e\2\u0268\1\u0269"+
    "\2\u023e\1\u0255\1\u023e\1\u0255\1\0\1\u026a\35\u023e\1\0"+
    "\2\u0256\1\u0257\2\0\1\u0257\3\0\1\u0184\36\0\2\u0256"+
    "\1\u0257\1\u01ba\1\0\1\u0257\3\0\1\u0184\1\0\4\u01ba"+
    "\1\0\21\u01ba\7\0\2\u0259\1\u025a\2\0\1\u025a\3\0"+
    "\1\u0187\36\0\2\u0259\1\u025a\1\u01be\1\0\1\u025a\3\0"+
    "\1\u0187\1\0\4\u01be\1\0\21\u01be\6\0\1\u0241\2\u026b"+
    "\1\u026c\2\u0241\1\u025c\1\u0241\1\u025c\1\0\1\u026d\35\u0241"+
    "\1\0\2\u025d\1\u025e\2\0\1\u025e\3\0\1\u018f\36\0"+
    "\2\u025d\1\u025e\1\u01c8\1\0\1\u025e\3\0\1\u018f\1\0"+
    "\4\u01c8\1\0\21\u01c8\14\0\1\u0260\1\u0261\46\0\1\u0261"+
    "\1\0\1\u026e\40\0\2\u0262\1\u0263\2\0\1\u0263\3\0"+
    "\1\u01af\36\0\2\u0262\1\u0263\1\u01f7\1\0\1\u0263\3\0"+
    "\1\u01af\1\0\4\u01f7\1\0\21\u01f7\7\0\2\u0265\1\u0266"+
    "\2\0\1\u0266\3\0\1\u01b2\36\0\2\u0265\1\u0266\1\u01fb"+
    "\1\0\1\u0266\3\0\1\u01b2\1\0\4\u01fb\1\0\21\u01fb"+
    "\7\0\2\u0268\1\u0269\2\0\1\u0269\3\0\1\u01b4\36\0"+
    "\2\u0268\1\u0269\1\u01fc\1\0\1\u0269\3\0\1\u01b4\1\0"+
    "\4\u01fc\1\0\21\u01fc\7\0\2\u026b\1\u026c\2\0\1\u026c"+
    "\3\0\1\u01c1\36\0\2\u026b\1\u026c\1\u0208\1\0\1\u026c"+
    "\3\0\1\u01c1\1\0\4\u0208\1\0\21\u0208\6\0\1\u026e"+
    "\3\0\4\u026e\1\u026f\1\0\37\u026e\2\u0270\1\u0271\2\u026e"+
    "\1\u026f\1\u026e\1\u026f\1\0\1\u0272\35\u026e\1\0\2\u0270"+
    "\1\u0271\2\0\1\u0271\3\0\1\u0231\36\0\2\u0270\1\u0271"+
    "\1\u024c\1\0\1\u0271\3\0\1\u0231\1\0\4\u024c\1\0"+
    "\21\u024c\6\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[20120];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\5\1\1\11\2\1\63\0\1\11\7\0\1\11\2\0"+
    "\1\11\3\0\2\11\12\0\1\11\1\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0"+
    "\1\11\1\0\1\11\3\0\1\11\1\0\1\11\3\0"+
    "\1\11\21\0\1\11\6\0\1\11\2\0\1\11\1\0"+
    "\2\11\13\0\1\11\1\0\1\11\5\0\1\11\35\0"+
    "\1\11\3\0\10\11\1\0\1\11\3\0\1\11\3\0"+
    "\1\11\4\0\1\11\23\0\1\11\1\0\1\11\3\0"+
    "\1\11\6\0\2\11\5\0\1\11\31\0\1\11\4\0"+
    "\1\11\6\0\2\11\1\0\2\11\2\0\2\11\7\0"+
    "\1\11\22\0\1\11\1\0\1\11\1\0\1\11\11\0"+
    "\2\11\3\0\1\11\4\0\2\11\2\0\1\11\1\0"+
    "\1\11\7\0\1\11\1\0\2\11\17\0\1\11\2\0"+
    "\1\11\1\0\1\11\5\0\1\11\20\0\3\11\5\0"+
    "\1\11\6\0\1\11\2\0\1\11\1\0\1\11\10\0"+
    "\1\1\1\0\1\11\1\0\1\11\12\0\1\1\2\0"+
    "\1\1\2\0\1\1\2\0\1\1\2\0\1\1\2\0"+
    "\1\1\2\0\1\1\2\0\1\1\2\0\1\1\2\0"+
    "\1\1\6\0\3\11\1\0\3\11\5\0\1\1\6\0"+
    "\1\1\20\0\1\1\15\0\1\1\2\0\1\1\1\11"+
    "\2\0\1\1\11\0\1\11\3\0\1\1\1\0\2\11"+
    "\2\0\1\1\10\0\1\1\2\0\1\1\2\0\1\1"+
    "\4\0\1\1\2\0\1\1\5\0\1\1\2\0\1\1"+
    "\3\0\1\1\4\0\1\1\2\0\1\1\2\0\1\1"+
    "\2\0\1\1\4\0\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[626];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    StringBuffer string = new StringBuffer();

    private Symbol symbol(int type) {
        return new Symbol(type, yyline, yycolumn);
    }

    private Symbol symbol(int type, Object value) {
        return new Symbol(type, yyline, yycolumn, value);
    }


    public String toString() {
          return ("line : " + (this.yyline + 1) + ", column : " +
						this.yycolumn + ", value :" + this.yytext());
   }



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  html_compact(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 152) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return symbol(sym.TEXT, yytext().trim());
            } 
            // fall through
          case 92: break;
          case 2: 
            { /* just skip what was found, do nothing */
            } 
            // fall through
          case 93: break;
          case 3: 
            { throw new Error("Illegal character <"+yytext()+">");
            } 
            // fall through
          case 94: break;
          case 4: 
            { return symbol(sym.B, yytext().trim());
            } 
            // fall through
          case 95: break;
          case 5: 
            { return symbol(sym.U, yytext().trim());
            } 
            // fall through
          case 96: break;
          case 6: 
            { return symbol(sym.I, yytext().trim());
            } 
            // fall through
          case 97: break;
          case 7: 
            { return symbol(sym.A, yytext().trim());
            } 
            // fall through
          case 98: break;
          case 8: 
            { return symbol(sym.P, yytext().trim());
            } 
            // fall through
          case 99: break;
          case 9: 
            { return symbol(sym.HR, yytext().trim());
            } 
            // fall through
          case 100: break;
          case 10: 
            { return symbol(sym.H1, yytext().trim());
            } 
            // fall through
          case 101: break;
          case 11: 
            { return symbol(sym.H2, yytext().trim());
            } 
            // fall through
          case 102: break;
          case 12: 
            { return symbol(sym.H3, yytext().trim());
            } 
            // fall through
          case 103: break;
          case 13: 
            { return symbol(sym.H4, yytext().trim());
            } 
            // fall through
          case 104: break;
          case 14: 
            { return symbol(sym.H5, yytext().trim());
            } 
            // fall through
          case 105: break;
          case 15: 
            { return symbol(sym.H6, yytext().trim());
            } 
            // fall through
          case 106: break;
          case 16: 
            { return symbol(sym.TH, yytext().trim());
            } 
            // fall through
          case 107: break;
          case 17: 
            { return symbol(sym.TD, yytext().trim());
            } 
            // fall through
          case 108: break;
          case 18: 
            { return symbol(sym.TR, yytext().trim());
            } 
            // fall through
          case 109: break;
          case 19: 
            { return symbol(sym.LI, yytext().trim());
            } 
            // fall through
          case 110: break;
          case 20: 
            { return symbol(sym.EB, yytext().trim());
            } 
            // fall through
          case 111: break;
          case 21: 
            { return symbol(sym.EU, yytext().trim());
            } 
            // fall through
          case 112: break;
          case 22: 
            { return symbol(sym.EI, yytext().trim());
            } 
            // fall through
          case 113: break;
          case 23: 
            { return symbol(sym.EA, yytext().trim());
            } 
            // fall through
          case 114: break;
          case 24: 
            { return symbol(sym.EP, yytext().trim());
            } 
            // fall through
          case 115: break;
          case 25: 
            { return symbol(sym.BR, yytext().trim());
            } 
            // fall through
          case 116: break;
          case 26: 
            { return symbol(sym.OL, yytext().trim());
            } 
            // fall through
          case 117: break;
          case 27: 
            { return symbol(sym.UL, yytext().trim());
            } 
            // fall through
          case 118: break;
          case 28: 
            { return symbol(sym.MAP, yytext().trim());
            } 
            // fall through
          case 119: break;
          case 29: 
            { return symbol(sym.EH1, yytext().trim());
            } 
            // fall through
          case 120: break;
          case 30: 
            { return symbol(sym.EH2, yytext().trim());
            } 
            // fall through
          case 121: break;
          case 31: 
            { return symbol(sym.EH3, yytext().trim());
            } 
            // fall through
          case 122: break;
          case 32: 
            { return symbol(sym.EH4, yytext().trim());
            } 
            // fall through
          case 123: break;
          case 33: 
            { return symbol(sym.EH5, yytext().trim());
            } 
            // fall through
          case 124: break;
          case 34: 
            { return symbol(sym.EH6, yytext().trim());
            } 
            // fall through
          case 125: break;
          case 35: 
            { return symbol(sym.ETH, yytext().trim());
            } 
            // fall through
          case 126: break;
          case 36: 
            { return symbol(sym.ETD, yytext().trim());
            } 
            // fall through
          case 127: break;
          case 37: 
            { return symbol(sym.ETR, yytext().trim());
            } 
            // fall through
          case 128: break;
          case 38: 
            { return symbol(sym.ELI, yytext().trim());
            } 
            // fall through
          case 129: break;
          case 39: 
            { return symbol(sym.EOL, yytext().trim());
            } 
            // fall through
          case 130: break;
          case 40: 
            { return symbol(sym.EUL, yytext().trim());
            } 
            // fall through
          case 131: break;
          case 41: 
            { return symbol(sym.DIR, yytext().trim());
            } 
            // fall through
          case 132: break;
          case 42: 
            { return symbol(sym.DIV, yytext().trim());
            } 
            // fall through
          case 133: break;
          case 43: 
            { return symbol(sym.IMG, yytext().trim());
            } 
            // fall through
          case 134: break;
          case 44: 
            { return symbol(sym.SUB, yytext().trim());
            } 
            // fall through
          case 135: break;
          case 45: 
            { return symbol(sym.SUP, yytext().trim());
            } 
            // fall through
          case 136: break;
          case 46: 
            { return symbol(sym.HTML, yytext().trim());
            } 
            // fall through
          case 137: break;
          case 47: 
            { return symbol(sym.MENU, yytext().trim());
            } 
            // fall through
          case 138: break;
          case 48: 
            { return symbol(sym.EMAP, yytext().trim());
            } 
            // fall through
          case 139: break;
          case 49: 
            { return symbol(sym.EDIR, yytext().trim());
            } 
            // fall through
          case 140: break;
          case 50: 
            { return symbol(sym.EDIV, yytext().trim());
            } 
            // fall through
          case 141: break;
          case 51: 
            { return symbol(sym.EVAR, yytext().trim());
            } 
            // fall through
          case 142: break;
          case 52: 
            { return symbol(sym.EPRE, yytext().trim());
            } 
            // fall through
          case 143: break;
          case 53: 
            { return symbol(sym.ESUB, yytext().trim());
            } 
            // fall through
          case 144: break;
          case 54: 
            { return symbol(sym.ESUP, yytext().trim());
            } 
            // fall through
          case 145: break;
          case 55: 
            { return symbol(sym.BODY, yytext().trim());
            } 
            // fall through
          case 146: break;
          case 56: 
            { return symbol(sym.SPAN, yytext().trim());
            } 
            // fall through
          case 147: break;
          case 57: 
            { return symbol(sym.FONT, yytext().trim());
            } 
            // fall through
          case 148: break;
          case 58: 
            { return symbol(sym.FORM, yytext().trim());
            } 
            // fall through
          case 149: break;
          case 59: 
            { return symbol(sym.THEAD, yytext().trim());
            } 
            // fall through
          case 150: break;
          case 60: 
            { return symbol(sym.TBODY, yytext().trim());
            } 
            // fall through
          case 151: break;
          case 61: 
            { return symbol(sym.TABLE, yytext().trim());
            } 
            // fall through
          case 152: break;
          case 62: 
            { return symbol(sym.LABEL, yytext().trim());
            } 
            // fall through
          case 153: break;
          case 63: 
            { return symbol(sym.EHTML, yytext().trim());
            } 
            // fall through
          case 154: break;
          case 64: 
            { return symbol(sym.EMENU, yytext().trim());
            } 
            // fall through
          case 155: break;
          case 65: 
            { return symbol(sym.EBODY, yytext().trim());
            } 
            // fall through
          case 156: break;
          case 66: 
            { return symbol(sym.ESPAN, yytext().trim());
            } 
            // fall through
          case 157: break;
          case 67: 
            { return symbol(sym.EFONT, yytext().trim());
            } 
            // fall through
          case 158: break;
          case 68: 
            { return symbol(sym.EFORM, yytext().trim());
            } 
            // fall through
          case 159: break;
          case 69: 
            { return symbol(sym.INPUT, yytext().trim());
            } 
            // fall through
          case 160: break;
          case 70: 
            { return symbol(sym.PARAM, yytext().trim());
            } 
            // fall through
          case 161: break;
          case 71: 
            { return symbol(sym.SMALL, yytext().trim());
            } 
            // fall through
          case 162: break;
          case 72: 
            { return symbol(sym.FRAME, yytext().trim());
            } 
            // fall through
          case 163: break;
          case 73: 
            { return symbol(sym.ETITLE, yytext().trim());
            } 
            // fall through
          case 164: break;
          case 74: 
            { return symbol(sym.ETABLE, yytext().trim());
            } 
            // fall through
          case 165: break;
          case 75: 
            { return symbol(sym.ELABEL, yytext().trim());
            } 
            // fall through
          case 166: break;
          case 76: 
            { return symbol(sym.ESMALL, yytext().trim());
            } 
            // fall through
          case 167: break;
          case 77: 
            { return symbol(sym.BUTTON, yytext().trim());
            } 
            // fall through
          case 168: break;
          case 78: 
            { return symbol(sym.OBJECT, yytext().trim());
            } 
            // fall through
          case 169: break;
          case 79: 
            { return symbol(sym.OPTION, yytext().trim());
            } 
            // fall through
          case 170: break;
          case 80: 
            { return symbol(sym.CENTER, yytext().trim());
            } 
            // fall through
          case 171: break;
          case 81: 
            { return symbol(sym.SELECT, yytext().trim());
            } 
            // fall through
          case 172: break;
          case 82: 
            { return symbol(sym.EBUTTON, yytext().trim());
            } 
            // fall through
          case 173: break;
          case 83: 
            { return symbol(sym.EOBJECT, yytext().trim());
            } 
            // fall through
          case 174: break;
          case 84: 
            { return symbol(sym.EOPTION, yytext().trim());
            } 
            // fall through
          case 175: break;
          case 85: 
            { return symbol(sym.ECENTER, yytext().trim());
            } 
            // fall through
          case 176: break;
          case 86: 
            { return symbol(sym.ESELECT, yytext().trim());
            } 
            // fall through
          case 177: break;
          case 87: 
            { return symbol(sym.ESCRIPT, yytext().trim());
            } 
            // fall through
          case 178: break;
          case 88: 
            { return symbol(sym.NOFRAMES, yytext().trim());
            } 
            // fall through
          case 179: break;
          case 89: 
            { return symbol(sym.FRAMESET, yytext().trim());
            } 
            // fall through
          case 180: break;
          case 90: 
            { return symbol(sym.ENOFRAMES, yytext().trim());
            } 
            // fall through
          case 181: break;
          case 91: 
            { return symbol(sym.EFRAMESET, yytext().trim());
            } 
            // fall through
          case 182: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
